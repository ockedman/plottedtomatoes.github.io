{
  "version": 3,
  "sources": ["../../d3-quadtree/src/add.js", "../../d3-quadtree/src/cover.js", "../../d3-quadtree/src/data.js", "../../d3-quadtree/src/extent.js", "../../d3-quadtree/src/quad.js", "../../d3-quadtree/src/find.js", "../../d3-quadtree/src/remove.js", "../../d3-quadtree/src/root.js", "../../d3-quadtree/src/size.js", "../../d3-quadtree/src/visit.js", "../../d3-quadtree/src/visitAfter.js", "../../d3-quadtree/src/x.js", "../../d3-quadtree/src/y.js", "../../d3-quadtree/src/quadtree.js", "../../d3-force/src/constant.js", "../../d3-force/src/jiggle.js", "../../d3-force/src/collide.js", "../../d3-dispatch/src/dispatch.js", "../../d3-timer/src/timer.js", "../../d3-force/src/lcg.js", "../../d3-force/src/simulation.js", "../../d3-force/src/x.js", "../../d3-force/src/y.js", "../../@nivo/swarmplot/src/SwarmPlotTooltip.tsx", "../../@nivo/swarmplot/src/props.ts", "../../@nivo/swarmplot/src/compute.ts", "../../@nivo/swarmplot/src/hooks.ts", "../../@nivo/swarmplot/src/Circles.tsx", "../../@nivo/swarmplot/src/CircleSvg.tsx", "../../@nivo/swarmplot/src/SwarmPlotAnnotations.tsx", "../../@nivo/swarmplot/src/SwarmPlot.tsx", "../../@nivo/swarmplot/src/ResponsiveSwarmPlot.tsx", "../../@nivo/swarmplot/src/SwarmPlotCanvas.tsx", "../../@nivo/swarmplot/src/ResponsiveSwarmPlotCanvas.tsx"],
  "sourcesContent": ["export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n", "export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n", "export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n", "export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n", "export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n", "import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n", "export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n", "export default function() {\n  return this._root;\n}\n", "export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n", "import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n", "import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n", "export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n", "export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n", "import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n", "import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n", "var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n", "var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n", "// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n", "import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n", "import constant from \"./constant.js\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n", "import constant from \"./constant.js\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SwarmPlotTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n", "import { ScaleLinearSpec } from '@nivo/scales'\nimport { SwarmPlotLayerId } from './types'\nimport { SwarmPlotTooltip } from './SwarmPlotTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' } as ScaleLinearSpec,\n    groupBy: 'group',\n    size: 6,\n    spacing: 2,\n    layout: 'vertical' as const,\n    gap: 0,\n    forceStrength: 1,\n    simulationIterations: 120,\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'rgba(0, 0, 0, 0)',\n    layers: ['grid', 'axes', 'circles', 'annotations', 'mesh'] as SwarmPlotLayerId[],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n    tooltip: SwarmPlotTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    annotations: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isString from 'lodash/isString'\nimport get from 'lodash/get'\nimport { scaleLinear, ScaleOrdinal, scaleOrdinal } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide, ForceX, ForceY } from 'd3-force'\nimport {\n    computeScale,\n    createDateNormalizer,\n    generateSeriesAxis,\n    ScaleLinear,\n    ScaleLinearSpec,\n    ScaleTime,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { ComputedDatum, PreSimulationDatum, SizeSpec, SimulationForces } from './types'\n\nconst getParsedValue = (scaleSpec: ScaleLinearSpec | ScaleTimeSpec) => {\n    if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec) as <T>(value: T) => T\n    }\n\n    return <T>(value: T) => value\n}\n\nexport const computeOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize: number\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((_, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) => {\n    const values = data.map(getValue)\n\n    if (scale.type === 'time') {\n        const series = [\n            { data: values.map(value => ({ data: { x: null, y: null, [axis]: value } })) },\n        ]\n        const axes = generateSeriesAxis(series, axis, scale)\n\n        return computeScale(scale, axes, axis === 'x' ? width : height, axis) as ScaleTime<\n            Date | string\n        >\n    }\n\n    const min = Math.min(...(values as number[]))\n    const max = Math.max(...(values as number[]))\n\n    return computeScale(\n        scale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    ) as ScaleLinear<number>\n}\n\nexport const getSizeGenerator = <RawDatum>(size: SizeSpec<RawDatum>) => {\n    // user defined size function\n    if (typeof size === 'function') {\n        return size\n    }\n\n    // static size\n    if (isNumber(size)) {\n        return () => size\n    }\n\n    // dynamic size based on config\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (d: RawDatum) => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}): SimulationForces<RawDatum> => {\n    const collisionForce = forceCollide<PreSimulationDatum<RawDatum>>(d => d.size / 2 + spacing / 2)\n\n    let xForce: ForceX<PreSimulationDatum<RawDatum>>\n    let yForce: ForceY<PreSimulationDatum<RawDatum>>\n    if (axis === 'x') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n    } else {\n        throw new Error(`Invalid axis provided: ${axis}`)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const computeNodes = <RawDatum>({\n    data,\n    getId,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}: {\n    data: RawDatum[]\n    getId: (datum: RawDatum) => string\n    layout: 'vertical' | 'horizontal'\n    getValue: (datum: RawDatum) => number | Date\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    getGroup: (datum: RawDatum) => string\n    ordinalScale: ScaleOrdinal<string, number>\n    getSize: (datum: RawDatum) => number\n    forces: SimulationForces<RawDatum>\n    simulationIterations: number\n    valueScaleConfig: ScaleLinearSpec | ScaleTimeSpec\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const parseValue = getParsedValue(valueScaleConfig)\n\n    const simulatedNodes: PreSimulationDatum<RawDatum>[] = data.map(d => ({\n        id: getId(d),\n        group: getGroup(d),\n        value: parseValue(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n\n    const simulation = forceSimulation<PreSimulationDatum<RawDatum>>(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes() as ComputedDatum<RawDatum>[],\n    }\n}\n", "import { useCallback, useMemo, MouseEvent } from 'react'\nimport { ScaleOrdinal } from 'd3-scale'\nimport { usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ScaleLinear, ScaleLinearSpec, ScaleTime, ScaleTimeSpec } from '@nivo/scales'\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    getSizeGenerator,\n    computeForces,\n    computeNodes,\n} from './compute'\nimport {\n    SwarmPlotCommonProps,\n    ComputedDatum,\n    SizeSpec,\n    SwarmPlotCustomLayerProps,\n    MouseHandlers,\n} from './types'\n\nexport const useValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) =>\n    useMemo(\n        () =>\n            computeValueScale<RawDatum>({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) =>\n    useMemo(\n        () => computeOrdinalScale({ width, height, axis, groups, gap }),\n        [width, height, axis, groups, gap]\n    )\n\nconst useSize = <RawDatum>(size: SizeSpec<RawDatum>) =>\n    useMemo(() => getSizeGenerator<RawDatum>(size), [size])\n\nexport const useForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}) =>\n    useMemo(\n        () =>\n            computeForces<RawDatum>({\n                axis,\n                valueScale,\n                ordinalScale,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, spacing, forceStrength]\n    )\n\nexport const useSwarmPlot = <RawDatum>({\n    data,\n    width,\n    height,\n    id,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    groups,\n    groupBy,\n    size,\n    spacing,\n    layout,\n    gap,\n    forceStrength,\n    simulationIterations,\n    colors,\n    colorBy,\n}: {\n    data: RawDatum[]\n    width: number\n    height: number\n    id: SwarmPlotCommonProps<RawDatum>['id']\n    value: SwarmPlotCommonProps<RawDatum>['value']\n    valueScale: SwarmPlotCommonProps<RawDatum>['valueScale']\n    valueFormat?: SwarmPlotCommonProps<RawDatum>['valueFormat']\n    groups: SwarmPlotCommonProps<RawDatum>['groups']\n    groupBy: SwarmPlotCommonProps<RawDatum>['groupBy']\n    size: SwarmPlotCommonProps<RawDatum>['size']\n    spacing: SwarmPlotCommonProps<RawDatum>['spacing']\n    layout: SwarmPlotCommonProps<RawDatum>['layout']\n    gap: SwarmPlotCommonProps<RawDatum>['gap']\n    forceStrength: SwarmPlotCommonProps<RawDatum>['forceStrength']\n    simulationIterations: SwarmPlotCommonProps<RawDatum>['simulationIterations']\n    colors: SwarmPlotCommonProps<RawDatum>['colors']\n    colorBy: SwarmPlotCommonProps<RawDatum>['colorBy']\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = usePropertyAccessor<RawDatum, string>(groupBy)\n    const getSize = useSize<RawDatum>(size)\n    const getColorId = usePropertyAccessor<Omit<ComputedDatum<RawDatum>, 'color'>, string>(colorBy)\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color'>>(\n        colors,\n        getColorId\n    )\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces<RawDatum>({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes<RawDatum>({\n                data,\n                getId,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getId,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n            valueScaleConfig,\n        ]\n    )\n\n    const augmentedNodes: ComputedDatum<RawDatum>[] = useMemo(\n        () =>\n            nodes.map(node => ({\n                ...node,\n                formattedValue: formatValue(node.value),\n                color: getColor(node),\n            })),\n        [nodes, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = <RawDatum>(\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n) =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = <RawDatum>({\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip,\n}: Pick<SwarmPlotCommonProps<RawDatum>, 'isInteractive' | 'tooltip'> & MouseHandlers<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const mouseEnterHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseEnter?.(node, event)\n        },\n        [isInteractive, onMouseEnter, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseMove?.(node, event)\n        },\n        [isInteractive, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [isInteractive, hideTooltip, onMouseLeave]\n    )\n\n    const clickHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            onClick?.(node, event)\n        },\n        [isInteractive, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nconst getNodeAnnotationPosition = (node: ComputedDatum<unknown>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = (node: ComputedDatum<unknown>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useSwarmPlotAnnotations = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    annotations: AnnotationMatcher<ComputedDatum<RawDatum>>[]\n) =>\n    useAnnotations<ComputedDatum<RawDatum>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n\nexport const useSwarmPlotLayerContext = <\n    RawDatum,\n    Scale extends\n        | ScaleLinear<number>\n        | ScaleTime<string | Date>\n        | ScaleOrdinal<string, number, never>\n>({\n    nodes,\n    xScale,\n    yScale,\n    innerWidth,\n    innerHeight,\n    outerWidth,\n    outerHeight,\n    margin,\n}: SwarmPlotCustomLayerProps<RawDatum, Scale>): SwarmPlotCustomLayerProps<RawDatum, Scale> =>\n    useMemo(\n        () => ({\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n        }),\n        [nodes, xScale, yScale, innerWidth, innerHeight, outerWidth, outerHeight, margin]\n    )\n", "import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, SwarmPlotCommonProps } from './types'\nimport { useBorderWidth } from './hooks'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n    borderColor: SwarmPlotCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: SwarmPlotCommonProps<RawDatum>['isInteractive']\n    tooltip: SwarmPlotCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.size / 2,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderWidth = useBorderWidth<RawDatum>(borderWidth)\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth: getBorderWidth(node),\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n", "import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={event => onMouseEnter?.(node, event)}\n            onMouseMove={event => onMouseMove?.(node, event)}\n            onMouseLeave={event => onMouseLeave?.(node, event)}\n            onClick={event => onClick?.(node, event)}\n        />\n    )\n}\n", "import { Annotation } from '@nivo/annotations'\nimport { ComputedDatum, SwarmPlotSvgProps } from './types'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nexport const SwarmPlotAnnotations = <RawDatum,>({\n    nodes,\n    annotations,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    annotations: SwarmPlotSvgProps<RawDatum>['annotations']\n}) => {\n    const boundAnnotations = useSwarmPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotLayerId, SwarmPlotSvgProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot, useSwarmPlotLayerContext, useNodeMouseHandlers } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { SwarmPlotAnnotations } from './SwarmPlotAnnotations'\n\ntype InnerSwarmPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotSvgProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSwarmPlot = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueScale = defaultProps.valueScale,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    circleComponent = CircleSvg,\n    useMesh = defaultProps.useMesh,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    annotations = defaultProps.annotations,\n    role = defaultProps.role,\n}: InnerSwarmPlotProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...props } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const xScale = props.xScale as Exclude<typeof props.xScale, ComputedDatum<RawDatum>[]>\n    const yScale = props.yScale as Exclude<typeof props.yScale, ComputedDatum<RawDatum>[]>\n\n    const handlers = useNodeMouseHandlers({\n        isInteractive,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n        tooltip,\n    })\n\n    const layerById: Record<SwarmPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        circles: null,\n        annotations: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                xValues={gridXValues}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop ?? undefined}\n                right={axisRight ?? undefined}\n                bottom={axisBottom ?? undefined}\n                left={axisLeft ?? undefined}\n            />\n        )\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={nodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                component={circleComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <SwarmPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={handlers.onMouseEnter}\n                onMouseMove={handlers.onMouseMove}\n                onMouseLeave={handlers.onMouseLeave}\n                onClick={handlers.onClick}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const layerContext = useSwarmPlotLayerContext({\n        nodes,\n        xScale,\n        yScale,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as SwarmPlotLayerId] !== undefined) {\n                    return layerById[layer as SwarmPlotLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const SwarmPlot = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotSvgProps } from './types'\nimport { SwarmPlot } from './SwarmPlot'\n\ntype ResponsiveSwarmPlotProps<RawDatum> = Partial<\n    Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlot = <RawDatum,>(props: ResponsiveSwarmPlotProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlot<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { createElement, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { Container, getRelativeCursor, isCursorInRect, useDimensions, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotCanvasProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot } from './hooks'\n\nexport const renderCircleDefault = <RawDatum,>(\n    ctx: CanvasRenderingContext2D,\n    {\n        node,\n        getBorderWidth,\n        getBorderColor,\n    }: {\n        node: ComputedDatum<RawDatum>\n        getBorderWidth: (node: ComputedDatum<RawDatum>) => number\n        getBorderColor: (node: ComputedDatum<RawDatum>) => string\n    }\n) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\ntype InnerSwarmCanvasPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotCanvasProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerSwarmPlotCanvas = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    valueScale = defaultProps.valueScale,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    renderCircle = renderCircleDefault,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerSwarmCanvasPlotProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ComputedDatum<RawDatum> | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...scales } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const { xScale, yScale } = scales as Record<'xScale' | 'yScale', AnyScale>\n\n    const { delaunay, voronoi } = useVoronoiMesh<ComputedDatum<RawDatum>>({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getBorderWidth = () => 1\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        if (!ctx) return\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (\n                layer === 'grid' &&\n                isNumber(theme.grid.line.strokeWidth) &&\n                theme.grid.line.strokeWidth > 0\n            ) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'circles') {\n                nodes.forEach(node => {\n                    renderCircle(ctx, {\n                        node,\n                        getBorderWidth,\n                        getBorderColor,\n                    })\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh && voronoi) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentNode) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                }\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        pixelRatio,\n        margin,\n        theme,\n        layers,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        voronoi,\n        debugMesh,\n        currentNode,\n        nodes,\n        renderCircle,\n        getBorderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: React.MouseEvent) => {\n            if (!canvasEl.current) {\n                return null\n            }\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) {\n                return null\n            }\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useCallback(\n        (node: ComputedDatum<RawDatum>, event: React.MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                onMouseMove?.(node, event)\n                showNodeTooltip(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, setCurrentNode, onMouseMove, showNodeTooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrentNode(null)\n    }, [hideTooltip, setCurrentNode])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const SwarmPlotCanvas = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlotCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotCanvasProps } from './types'\nimport { SwarmPlotCanvas } from './SwarmPlotCanvas'\n\ntype ResponsiveSwarmPlotCanvasProps<RawDatum> = Partial<\n    Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlotCanvas = <RawDatum,>(\n    props: ResponsiveSwarmPlotCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAe,SAAR,YAAiB,GAAG;AACzB,QAAMA,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,GAC3BC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC;AAC7B,SAAO,IAAI,KAAK,MAAMD,IAAGC,EAAC,GAAGD,IAAGC,IAAG,CAAC;AACtC;AAEA,SAAS,IAAI,MAAMD,IAAGC,IAAG,GAAG;AAC1B,MAAI,MAAMD,EAAC,KAAK,MAAMC,EAAC,EAAG,QAAO;AAEjC,MAAI,QACA,OAAO,KAAK,OACZ,OAAO,EAAC,MAAM,EAAC,GACf,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,IACA,IACA,IACA,IACA,OACA,QACAC,IACAC;AAGJ,MAAI,CAAC,KAAM,QAAO,KAAK,QAAQ,MAAM;AAGrC,SAAO,KAAK,QAAQ;AAClB,QAAI,QAAQH,OAAM,MAAM,KAAK,MAAM,GAAI,MAAK;AAAA,QAAS,MAAK;AAC1D,QAAI,SAASC,OAAM,MAAM,KAAK,MAAM,GAAI,MAAK;AAAA,QAAS,MAAK;AAC3D,QAAI,SAAS,MAAM,EAAE,OAAO,KAAKC,KAAI,UAAU,IAAI,KAAK,GAAI,QAAO,OAAOA,EAAC,IAAI,MAAM;AAAA,EACvF;AAGA,OAAK,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI;AAClC,OAAK,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI;AAClC,MAAIF,OAAM,MAAMC,OAAM,GAAI,QAAO,KAAK,OAAO,MAAM,SAAS,OAAOC,EAAC,IAAI,OAAO,KAAK,QAAQ,MAAM;AAGlG,KAAG;AACD,aAAS,SAAS,OAAOA,EAAC,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC;AACrE,QAAI,QAAQF,OAAM,MAAM,KAAK,MAAM,GAAI,MAAK;AAAA,QAAS,MAAK;AAC1D,QAAI,SAASC,OAAM,MAAM,KAAK,MAAM,GAAI,MAAK;AAAA,QAAS,MAAK;AAAA,EAC7D,UAAUC,KAAI,UAAU,IAAI,YAAYC,MAAK,MAAM,OAAO,IAAK,MAAM;AACrE,SAAO,OAAOA,EAAC,IAAI,MAAM,OAAOD,EAAC,IAAI,MAAM;AAC7C;AAEO,SAAS,OAAO,MAAM;AAC3B,MAAI,GAAGA,IAAGE,KAAI,KAAK,QACfJ,IACAC,IACA,KAAK,IAAI,MAAMG,EAAC,GAChB,KAAK,IAAI,MAAMA,EAAC,GAChB,KAAK,UACL,KAAK,UACL,KAAK,WACL,KAAK;AAGT,OAAKF,KAAI,GAAGA,KAAIE,IAAG,EAAEF,IAAG;AACtB,QAAI,MAAMF,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,IAAI,KAAKE,EAAC,CAAC,CAAC,KAAK,MAAMD,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC,EAAG;AACtF,OAAGC,EAAC,IAAIF;AACR,OAAGE,EAAC,IAAID;AACR,QAAID,KAAI,GAAI,MAAKA;AACjB,QAAIA,KAAI,GAAI,MAAKA;AACjB,QAAIC,KAAI,GAAI,MAAKA;AACjB,QAAIA,KAAI,GAAI,MAAKA;AAAA,EACnB;AAGA,MAAI,KAAK,MAAM,KAAK,GAAI,QAAO;AAG/B,OAAK,MAAM,IAAI,EAAE,EAAE,MAAM,IAAI,EAAE;AAG/B,OAAKC,KAAI,GAAGA,KAAIE,IAAG,EAAEF,IAAG;AACtB,QAAI,MAAM,GAAGA,EAAC,GAAG,GAAGA,EAAC,GAAG,KAAKA,EAAC,CAAC;AAAA,EACjC;AAEA,SAAO;AACT;;;ACnFe,SAAR,cAAiBG,IAAGC,IAAG;AAC5B,MAAI,MAAMD,KAAI,CAACA,EAAC,KAAK,MAAMC,KAAI,CAACA,EAAC,EAAG,QAAO;AAE3C,MAAI,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK;AAKd,MAAI,MAAM,EAAE,GAAG;AACb,UAAM,KAAK,KAAK,MAAMD,EAAC,KAAK;AAC5B,UAAM,KAAK,KAAK,MAAMC,EAAC,KAAK;AAAA,EAC9B,OAGK;AACH,QAAIC,KAAI,KAAK,MAAM,GACf,OAAO,KAAK,OACZ,QACAC;AAEJ,WAAO,KAAKH,MAAKA,MAAK,MAAM,KAAKC,MAAKA,MAAK,IAAI;AAC7C,MAAAE,MAAKF,KAAI,OAAO,IAAKD,KAAI;AACzB,eAAS,IAAI,MAAM,CAAC,GAAG,OAAOG,EAAC,IAAI,MAAM,OAAO,QAAQD,MAAK;AAC7D,cAAQC,IAAG;AAAA,QACT,KAAK;AAAG,eAAK,KAAKD,IAAG,KAAK,KAAKA;AAAG;AAAA,QAClC,KAAK;AAAG,eAAK,KAAKA,IAAG,KAAK,KAAKA;AAAG;AAAA,QAClC,KAAK;AAAG,eAAK,KAAKA,IAAG,KAAK,KAAKA;AAAG;AAAA,QAClC,KAAK;AAAG,eAAK,KAAKA,IAAG,KAAK,KAAKA;AAAG;AAAA,MACpC;AAAA,IACF;AAEA,QAAI,KAAK,SAAS,KAAK,MAAM,OAAQ,MAAK,QAAQ;AAAA,EACpD;AAEA,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,SAAO;AACT;;;AC1Ce,SAAR,eAAmB;AACxB,MAAI,OAAO,CAAC;AACZ,OAAK,MAAM,SAAS,MAAM;AACxB,QAAI,CAAC,KAAK,OAAQ;AAAG,WAAK,KAAK,KAAK,IAAI;AAAA,WAAU,OAAO,KAAK;AAAA,EAChE,CAAC;AACD,SAAO;AACT;;;ACNe,SAAR,eAAiBE,IAAG;AACzB,SAAO,UAAU,SACX,KAAK,MAAM,CAACA,GAAE,CAAC,EAAE,CAAC,GAAG,CAACA,GAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAACA,GAAE,CAAC,EAAE,CAAC,GAAG,CAACA,GAAE,CAAC,EAAE,CAAC,CAAC,IACvD,MAAM,KAAK,GAAG,IAAI,SAAY,CAAC,CAAC,KAAK,KAAK,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC;AACjF;;;ACJe,SAAR,aAAiB,MAAM,IAAI,IAAI,IAAI,IAAI;AAC5C,OAAK,OAAO;AACZ,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACZ;;;ACJe,SAAR,aAAiBC,IAAGC,IAAG,QAAQ;AACpC,MAAI,MACA,KAAK,KAAK,KACV,KAAK,KAAK,KACV,IACA,IACAC,KACAC,KACAC,MAAK,KAAK,KACVC,MAAK,KAAK,KACV,QAAQ,CAAC,GACT,OAAO,KAAK,OACZ,GACAC;AAEJ,MAAI,KAAM,OAAM,KAAK,IAAI,aAAK,MAAM,IAAI,IAAIF,KAAIC,GAAE,CAAC;AACnD,MAAI,UAAU,KAAM,UAAS;AAAA,OACxB;AACH,SAAKL,KAAI,QAAQ,KAAKC,KAAI;AAC1B,IAAAG,MAAKJ,KAAI,QAAQK,MAAKJ,KAAI;AAC1B,cAAU;AAAA,EACZ;AAEA,SAAO,IAAI,MAAM,IAAI,GAAG;AAGtB,QAAI,EAAE,OAAO,EAAE,UACP,KAAK,EAAE,MAAMG,QACb,KAAK,EAAE,MAAMC,QACbH,MAAK,EAAE,MAAM,OACbC,MAAK,EAAE,MAAM,GAAI;AAGzB,QAAI,KAAK,QAAQ;AACf,UAAI,MAAM,KAAKD,OAAM,GACjB,MAAM,KAAKC,OAAM;AAErB,YAAM;AAAA,QACJ,IAAI,aAAK,KAAK,CAAC,GAAG,IAAI,IAAID,KAAIC,GAAE;AAAA,QAChC,IAAI,aAAK,KAAK,CAAC,GAAG,IAAI,IAAI,IAAIA,GAAE;AAAA,QAChC,IAAI,aAAK,KAAK,CAAC,GAAG,IAAI,IAAID,KAAI,EAAE;AAAA,QAChC,IAAI,aAAK,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,EAAE;AAAA,MAClC;AAGA,UAAII,MAAKL,MAAK,OAAO,IAAKD,MAAK,IAAK;AAClC,YAAI,MAAM,MAAM,SAAS,CAAC;AAC1B,cAAM,MAAM,SAAS,CAAC,IAAI,MAAM,MAAM,SAAS,IAAIM,EAAC;AACpD,cAAM,MAAM,SAAS,IAAIA,EAAC,IAAI;AAAA,MAChC;AAAA,IACF,OAGK;AACH,UAAI,KAAKN,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI,GACtC,KAAKC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,KAAK,IAAI,GACtC,KAAK,KAAK,KAAK,KAAK;AACxB,UAAI,KAAK,QAAQ;AACf,YAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AAC7B,aAAKD,KAAI,GAAG,KAAKC,KAAI;AACrB,QAAAG,MAAKJ,KAAI,GAAGK,MAAKJ,KAAI;AACrB,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ACrEe,SAAR,eAAiB,GAAG;AACzB,MAAI,MAAMM,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC,KAAK,MAAMC,KAAI,CAAC,KAAK,GAAG,KAAK,MAAM,CAAC,CAAC,EAAG,QAAO;AAEnF,MAAI,QACA,OAAO,KAAK,OACZ,UACA,UACA,MACA,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACVD,IACAC,IACA,IACA,IACA,OACA,QACAC,IACAC;AAGJ,MAAI,CAAC,KAAM,QAAO;AAIlB,MAAI,KAAK,OAAQ,QAAO,MAAM;AAC5B,QAAI,QAAQH,OAAM,MAAM,KAAK,MAAM,GAAI,MAAK;AAAA,QAAS,MAAK;AAC1D,QAAI,SAASC,OAAM,MAAM,KAAK,MAAM,GAAI,MAAK;AAAA,QAAS,MAAK;AAC3D,QAAI,EAAE,SAAS,MAAM,OAAO,KAAKC,KAAI,UAAU,IAAI,KAAK,GAAI,QAAO;AACnE,QAAI,CAAC,KAAK,OAAQ;AAClB,QAAI,OAAQA,KAAI,IAAK,CAAC,KAAK,OAAQA,KAAI,IAAK,CAAC,KAAK,OAAQA,KAAI,IAAK,CAAC,EAAG,YAAW,QAAQC,KAAID;AAAA,EAChG;AAGA,SAAO,KAAK,SAAS,EAAG,KAAI,EAAE,WAAW,MAAM,OAAO,KAAK,MAAO,QAAO;AACzE,MAAI,OAAO,KAAK,KAAM,QAAO,KAAK;AAGlC,MAAI,SAAU,QAAQ,OAAO,SAAS,OAAO,OAAO,OAAO,SAAS,MAAO;AAG3E,MAAI,CAAC,OAAQ,QAAO,KAAK,QAAQ,MAAM;AAGvC,SAAO,OAAOA,EAAC,IAAI,OAAO,OAAO,OAAOA,EAAC;AAGzC,OAAK,OAAO,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,MACpD,UAAU,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC,MACzD,CAAC,KAAK,QAAQ;AACnB,QAAI,SAAU,UAASC,EAAC,IAAI;AAAA,QACvB,MAAK,QAAQ;AAAA,EACpB;AAEA,SAAO;AACT;AAEO,SAAS,UAAU,MAAM;AAC9B,WAASD,KAAI,GAAGE,KAAI,KAAK,QAAQF,KAAIE,IAAG,EAAEF,GAAG,MAAK,OAAO,KAAKA,EAAC,CAAC;AAChE,SAAO;AACT;;;AC7De,SAAR,eAAmB;AACxB,SAAO,KAAK;AACd;;;ACFe,SAAR,eAAmB;AACxB,MAAI,OAAO;AACX,OAAK,MAAM,SAAS,MAAM;AACxB,QAAI,CAAC,KAAK,OAAQ;AAAG,QAAE;AAAA,WAAa,OAAO,KAAK;AAAA,EAClD,CAAC;AACD,SAAO;AACT;;;ACJe,SAAR,cAAiB,UAAU;AAChC,MAAI,QAAQ,CAAC,GAAG,GAAG,OAAO,KAAK,OAAO,OAAO,IAAI,IAAI,IAAI;AACzD,MAAI,KAAM,OAAM,KAAK,IAAI,aAAK,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AAC3E,SAAO,IAAI,MAAM,IAAI,GAAG;AACtB,QAAI,CAAC,SAAS,OAAO,EAAE,MAAM,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,EAAE,KAAK,KAAK,QAAQ;AACvF,UAAI,MAAM,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM;AACzC,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAC/D,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAC/D,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAC/D,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAAA,IACjE;AAAA,EACF;AACA,SAAO;AACT;;;ACbe,SAAR,mBAAiB,UAAU;AAChC,MAAI,QAAQ,CAAC,GAAG,OAAO,CAAC,GAAG;AAC3B,MAAI,KAAK,MAAO,OAAM,KAAK,IAAI,aAAK,KAAK,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AACvF,SAAO,IAAI,MAAM,IAAI,GAAG;AACtB,QAAI,OAAO,EAAE;AACb,QAAI,KAAK,QAAQ;AACf,UAAI,OAAO,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI,MAAM,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM;AAC5F,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAC/D,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAC/D,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAC/D,UAAI,QAAQ,KAAK,CAAC,EAAG,OAAM,KAAK,IAAI,aAAK,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;AAAA,IACjE;AACA,SAAK,KAAK,CAAC;AAAA,EACb;AACA,SAAO,IAAI,KAAK,IAAI,GAAG;AACrB,aAAS,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EACzC;AACA,SAAO;AACT;;;ACpBO,SAAS,SAAS,GAAG;AAC1B,SAAO,EAAE,CAAC;AACZ;AAEe,SAAR,UAAiBG,IAAG;AACzB,SAAO,UAAU,UAAU,KAAK,KAAKA,IAAG,QAAQ,KAAK;AACvD;;;ACNO,SAAS,SAAS,GAAG;AAC1B,SAAO,EAAE,CAAC;AACZ;AAEe,SAAR,UAAiBC,IAAG;AACzB,SAAO,UAAU,UAAU,KAAK,KAAKA,IAAG,QAAQ,KAAK;AACvD;;;ACOe,SAAR,SAA0B,OAAOC,IAAGC,IAAG;AAC5C,MAAI,OAAO,IAAI,SAASD,MAAK,OAAO,WAAWA,IAAGC,MAAK,OAAO,WAAWA,IAAG,KAAK,KAAK,KAAK,GAAG;AAC9F,SAAO,SAAS,OAAO,OAAO,KAAK,OAAO,KAAK;AACjD;AAEA,SAAS,SAASD,IAAGC,IAAG,IAAI,IAAI,IAAI,IAAI;AACtC,OAAK,KAAKD;AACV,OAAK,KAAKC;AACV,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,MAAM;AACX,OAAK,QAAQ;AACf;AAEA,SAAS,UAAU,MAAM;AACvB,MAAI,OAAO,EAAC,MAAM,KAAK,KAAI,GAAG,OAAO;AACrC,SAAO,OAAO,KAAK,KAAM,QAAO,KAAK,OAAO,EAAC,MAAM,KAAK,KAAI;AAC5D,SAAO;AACT;AAEA,IAAI,YAAY,SAAS,YAAY,SAAS;AAE9C,UAAU,OAAO,WAAW;AAC1B,MAAI,OAAO,IAAI,SAAS,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,GAC5E,OAAO,KAAK,OACZ,OACA;AAEJ,MAAI,CAAC,KAAM,QAAO;AAElB,MAAI,CAAC,KAAK,OAAQ,QAAO,KAAK,QAAQ,UAAU,IAAI,GAAG;AAEvD,UAAQ,CAAC,EAAC,QAAQ,MAAM,QAAQ,KAAK,QAAQ,IAAI,MAAM,CAAC,EAAC,CAAC;AAC1D,SAAO,OAAO,MAAM,IAAI,GAAG;AACzB,aAASC,KAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AAC1B,UAAI,QAAQ,KAAK,OAAOA,EAAC,GAAG;AAC1B,YAAI,MAAM,OAAQ,OAAM,KAAK,EAAC,QAAQ,OAAO,QAAQ,KAAK,OAAOA,EAAC,IAAI,IAAI,MAAM,CAAC,EAAC,CAAC;AAAA,YAC9E,MAAK,OAAOA,EAAC,IAAI,UAAU,KAAK;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEA,UAAU,MAAM;AAChB,UAAU,SAAS;AACnB,UAAU,QAAQ;AAClB,UAAU,OAAO;AACjB,UAAU,SAAS;AACnB,UAAU,OAAO;AACjB,UAAU,SAAS;AACnB,UAAU,YAAY;AACtB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,QAAQ;AAClB,UAAU,aAAa;AACvB,UAAU,IAAI;AACd,UAAU,IAAI;;;ACxEC,SAAR,iBAAiBC,IAAG;AACzB,SAAO,WAAW;AAChB,WAAOA;AAAA,EACT;AACF;;;ACJe,SAAR,eAAiB,QAAQ;AAC9B,UAAQ,OAAO,IAAI,OAAO;AAC5B;;;ACEA,SAAS,EAAE,GAAG;AACZ,SAAO,EAAE,IAAI,EAAE;AACjB;AAEA,SAAS,EAAE,GAAG;AACZ,SAAO,EAAE,IAAI,EAAE;AACjB;AAEe,SAAR,gBAAiB,QAAQ;AAC9B,MAAI,OACA,OACA,QACA,WAAW,GACX,aAAa;AAEjB,MAAI,OAAO,WAAW,WAAY,UAAS,iBAAS,UAAU,OAAO,IAAI,CAAC,MAAM;AAEhF,WAAS,QAAQ;AACf,QAAIC,IAAGC,KAAI,MAAM,QACb,MACA,MACA,IACA,IACA,IACA;AAEJ,aAASC,KAAI,GAAGA,KAAI,YAAY,EAAEA,IAAG;AACnC,aAAO,SAAS,OAAO,GAAG,CAAC,EAAE,WAAW,OAAO;AAC/C,WAAKF,KAAI,GAAGA,KAAIC,IAAG,EAAED,IAAG;AACtB,eAAO,MAAMA,EAAC;AACd,aAAK,MAAM,KAAK,KAAK,GAAG,MAAM,KAAK;AACnC,aAAK,KAAK,IAAI,KAAK;AACnB,aAAK,KAAK,IAAI,KAAK;AACnB,aAAK,MAAM,KAAK;AAAA,MAClB;AAAA,IACF;AAEA,aAAS,MAAM,MAAM,IAAI,IAAI,IAAI,IAAI;AACnC,UAAI,OAAO,KAAK,MAAM,KAAK,KAAK,GAAGG,KAAI,KAAK;AAC5C,UAAI,MAAM;AACR,YAAI,KAAK,QAAQ,KAAK,OAAO;AAC3B,cAAIC,KAAI,KAAK,KAAK,IAAI,KAAK,IACvBC,KAAI,KAAK,KAAK,IAAI,KAAK,IACvBC,KAAIF,KAAIA,KAAIC,KAAIA;AACpB,cAAIC,KAAIH,KAAIA,IAAG;AACb,gBAAIC,OAAM,EAAG,CAAAA,KAAI,eAAO,MAAM,GAAGE,MAAKF,KAAIA;AAC1C,gBAAIC,OAAM,EAAG,CAAAA,KAAI,eAAO,MAAM,GAAGC,MAAKD,KAAIA;AAC1C,YAAAC,MAAKH,MAAKG,KAAI,KAAK,KAAKA,EAAC,MAAMA,KAAI;AACnC,iBAAK,OAAOF,MAAKE,OAAMH,MAAK,MAAM,OAAO,MAAM;AAC/C,iBAAK,OAAOE,MAAKC,MAAKH;AACtB,iBAAK,MAAMC,MAAKD,KAAI,IAAIA;AACxB,iBAAK,MAAME,KAAIF;AAAA,UACjB;AAAA,QACF;AACA;AAAA,MACF;AACA,aAAO,KAAK,KAAKA,MAAK,KAAK,KAAKA,MAAK,KAAK,KAAKA,MAAK,KAAK,KAAKA;AAAA,IAChE;AAAA,EACF;AAEA,WAAS,QAAQ,MAAM;AACrB,QAAI,KAAK,KAAM,QAAO,KAAK,IAAI,MAAM,KAAK,KAAK,KAAK;AACpD,aAASH,KAAI,KAAK,IAAI,GAAGA,KAAI,GAAG,EAAEA,IAAG;AACnC,UAAI,KAAKA,EAAC,KAAK,KAAKA,EAAC,EAAE,IAAI,KAAK,GAAG;AACjC,aAAK,IAAI,KAAKA,EAAC,EAAE;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC,MAAO;AACZ,QAAIA,IAAGC,KAAI,MAAM,QAAQ;AACzB,YAAQ,IAAI,MAAMA,EAAC;AACnB,SAAKD,KAAI,GAAGA,KAAIC,IAAG,EAAED,GAAG,QAAO,MAAMA,EAAC,GAAG,MAAM,KAAK,KAAK,IAAI,CAAC,OAAO,MAAMA,IAAG,KAAK;AAAA,EACrF;AAEA,QAAM,aAAa,SAAS,QAAQ,SAAS;AAC3C,YAAQ;AACR,aAAS;AACT,eAAW;AAAA,EACb;AAEA,QAAM,aAAa,SAASO,IAAG;AAC7B,WAAO,UAAU,UAAU,aAAa,CAACA,IAAG,SAAS;AAAA,EACvD;AAEA,QAAM,WAAW,SAASA,IAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,CAACA,IAAG,SAAS;AAAA,EACrD;AAEA,QAAM,SAAS,SAASA,IAAG;AACzB,WAAO,UAAU,UAAU,SAAS,OAAOA,OAAM,aAAaA,KAAI,iBAAS,CAACA,EAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EACzG;AAEA,SAAO;AACT;;;ACnGA,IAAI,OAAO,EAAC,OAAO,MAAM;AAAC,EAAC;AAE3B,SAAS,WAAW;AAClB,WAASC,KAAI,GAAGC,KAAI,UAAU,QAAQC,KAAI,CAAC,GAAGC,IAAGH,KAAIC,IAAG,EAAED,IAAG;AAC3D,QAAI,EAAEG,KAAI,UAAUH,EAAC,IAAI,OAAQG,MAAKD,MAAM,QAAQ,KAAKC,EAAC,EAAG,OAAM,IAAI,MAAM,mBAAmBA,EAAC;AACjG,IAAAD,GAAEC,EAAC,IAAI,CAAC;AAAA,EACV;AACA,SAAO,IAAI,SAASD,EAAC;AACvB;AAEA,SAAS,SAASA,IAAG;AACnB,OAAK,IAAIA;AACX;AAEA,SAAS,eAAe,WAAW,OAAO;AACxC,SAAO,UAAU,KAAK,EAAE,MAAM,OAAO,EAAE,IAAI,SAASC,IAAG;AACrD,QAAI,OAAO,IAAIH,KAAIG,GAAE,QAAQ,GAAG;AAChC,QAAIH,MAAK,EAAG,QAAOG,GAAE,MAAMH,KAAI,CAAC,GAAGG,KAAIA,GAAE,MAAM,GAAGH,EAAC;AACnD,QAAIG,MAAK,CAAC,MAAM,eAAeA,EAAC,EAAG,OAAM,IAAI,MAAM,mBAAmBA,EAAC;AACvE,WAAO,EAAC,MAAMA,IAAG,KAAU;AAAA,EAC7B,CAAC;AACH;AAEA,SAAS,YAAY,SAAS,YAAY;AAAA,EACxC,aAAa;AAAA,EACb,IAAI,SAAS,UAAU,UAAU;AAC/B,QAAID,KAAI,KAAK,GACT,IAAI,eAAe,WAAW,IAAIA,EAAC,GACnCC,IACAH,KAAI,IACJC,KAAI,EAAE;AAGV,QAAI,UAAU,SAAS,GAAG;AACxB,aAAO,EAAED,KAAIC,GAAG,MAAKE,MAAK,WAAW,EAAEH,EAAC,GAAG,UAAUG,KAAI,IAAID,GAAEC,EAAC,GAAG,SAAS,IAAI,GAAI,QAAOA;AAC3F;AAAA,IACF;AAIA,QAAI,YAAY,QAAQ,OAAO,aAAa,WAAY,OAAM,IAAI,MAAM,uBAAuB,QAAQ;AACvG,WAAO,EAAEH,KAAIC,IAAG;AACd,UAAIE,MAAK,WAAW,EAAEH,EAAC,GAAG,KAAM,CAAAE,GAAEC,EAAC,IAAI,IAAID,GAAEC,EAAC,GAAG,SAAS,MAAM,QAAQ;AAAA,eAC/D,YAAY,KAAM,MAAKA,MAAKD,GAAG,CAAAA,GAAEC,EAAC,IAAI,IAAID,GAAEC,EAAC,GAAG,SAAS,MAAM,IAAI;AAAA,IAC9E;AAEA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,WAAW;AACf,QAAI,OAAO,CAAC,GAAGD,KAAI,KAAK;AACxB,aAASC,MAAKD,GAAG,MAAKC,EAAC,IAAID,GAAEC,EAAC,EAAE,MAAM;AACtC,WAAO,IAAI,SAAS,IAAI;AAAA,EAC1B;AAAA,EACA,MAAM,SAAS,MAAM,MAAM;AACzB,SAAKF,KAAI,UAAU,SAAS,KAAK,EAAG,UAAS,OAAO,IAAI,MAAMA,EAAC,GAAGD,KAAI,GAAGC,IAAGE,IAAGH,KAAIC,IAAG,EAAED,GAAG,MAAKA,EAAC,IAAI,UAAUA,KAAI,CAAC;AACpH,QAAI,CAAC,KAAK,EAAE,eAAe,IAAI,EAAG,OAAM,IAAI,MAAM,mBAAmB,IAAI;AACzE,SAAKG,KAAI,KAAK,EAAE,IAAI,GAAGH,KAAI,GAAGC,KAAIE,GAAE,QAAQH,KAAIC,IAAG,EAAED,GAAG,CAAAG,GAAEH,EAAC,EAAE,MAAM,MAAM,MAAM,IAAI;AAAA,EACrF;AAAA,EACA,OAAO,SAAS,MAAM,MAAM,MAAM;AAChC,QAAI,CAAC,KAAK,EAAE,eAAe,IAAI,EAAG,OAAM,IAAI,MAAM,mBAAmB,IAAI;AACzE,aAASG,KAAI,KAAK,EAAE,IAAI,GAAGH,KAAI,GAAGC,KAAIE,GAAE,QAAQH,KAAIC,IAAG,EAAED,GAAG,CAAAG,GAAEH,EAAC,EAAE,MAAM,MAAM,MAAM,IAAI;AAAA,EACzF;AACF;AAEA,SAAS,IAAI,MAAM,MAAM;AACvB,WAASA,KAAI,GAAGC,KAAI,KAAK,QAAQG,IAAGJ,KAAIC,IAAG,EAAED,IAAG;AAC9C,SAAKI,KAAI,KAAKJ,EAAC,GAAG,SAAS,MAAM;AAC/B,aAAOI,GAAE;AAAA,IACX;AAAA,EACF;AACF;AAEA,SAAS,IAAI,MAAM,MAAM,UAAU;AACjC,WAASJ,KAAI,GAAGC,KAAI,KAAK,QAAQD,KAAIC,IAAG,EAAED,IAAG;AAC3C,QAAI,KAAKA,EAAC,EAAE,SAAS,MAAM;AACzB,WAAKA,EAAC,IAAI,MAAM,OAAO,KAAK,MAAM,GAAGA,EAAC,EAAE,OAAO,KAAK,MAAMA,KAAI,CAAC,CAAC;AAChE;AAAA,IACF;AAAA,EACF;AACA,MAAI,YAAY,KAAM,MAAK,KAAK,EAAC,MAAY,OAAO,SAAQ,CAAC;AAC7D,SAAO;AACT;AAEA,IAAO,mBAAQ;;;ACnFf,IAAI,QAAQ;AAAZ,IACI,UAAU;AADd,IAEI,WAAW;AAFf,IAGI,YAAY;AAHhB,IAII;AAJJ,IAKI;AALJ,IAMI,YAAY;AANhB,IAOI,WAAW;AAPf,IAQI,YAAY;AARhB,IASI,QAAQ,OAAO,gBAAgB,YAAY,YAAY,MAAM,cAAc;AAT/E,IAUI,WAAW,OAAO,WAAW,YAAY,OAAO,wBAAwB,OAAO,sBAAsB,KAAK,MAAM,IAAI,SAAS,GAAG;AAAE,aAAW,GAAG,EAAE;AAAG;AAElJ,SAAS,MAAM;AACpB,SAAO,aAAa,SAAS,QAAQ,GAAG,WAAW,MAAM,IAAI,IAAI;AACnE;AAEA,SAAS,WAAW;AAClB,aAAW;AACb;AAEO,SAAS,QAAQ;AACtB,OAAK,QACL,KAAK,QACL,KAAK,QAAQ;AACf;AAEA,MAAM,YAAY,MAAM,YAAY;AAAA,EAClC,aAAa;AAAA,EACb,SAAS,SAAS,UAAU,OAAO,MAAM;AACvC,QAAI,OAAO,aAAa,WAAY,OAAM,IAAI,UAAU,4BAA4B;AACpF,YAAQ,QAAQ,OAAO,IAAI,IAAI,CAAC,SAAS,SAAS,OAAO,IAAI,CAAC;AAC9D,QAAI,CAAC,KAAK,SAAS,aAAa,MAAM;AACpC,UAAI,SAAU,UAAS,QAAQ;AAAA,UAC1B,YAAW;AAChB,iBAAW;AAAA,IACb;AACA,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,UAAM;AAAA,EACR;AAAA,EACA,MAAM,WAAW;AACf,QAAI,KAAK,OAAO;AACd,WAAK,QAAQ;AACb,WAAK,QAAQ;AACb,YAAM;AAAA,IACR;AAAA,EACF;AACF;AAEO,SAAS,MAAM,UAAU,OAAO,MAAM;AAC3C,MAAIK,KAAI,IAAI;AACZ,EAAAA,GAAE,QAAQ,UAAU,OAAO,IAAI;AAC/B,SAAOA;AACT;AAEO,SAAS,aAAa;AAC3B,MAAI;AACJ,IAAE;AACF,MAAIA,KAAI,UAAUC;AAClB,SAAOD,IAAG;AACR,SAAKC,KAAI,WAAWD,GAAE,UAAU,EAAG,CAAAA,GAAE,MAAM,KAAK,MAAMC,EAAC;AACvD,IAAAD,KAAIA,GAAE;AAAA,EACR;AACA,IAAE;AACJ;AAEA,SAAS,OAAO;AACd,cAAY,YAAY,MAAM,IAAI,KAAK;AACvC,UAAQ,UAAU;AAClB,MAAI;AACF,eAAW;AAAA,EACb,UAAE;AACA,YAAQ;AACR,QAAI;AACJ,eAAW;AAAA,EACb;AACF;AAEA,SAAS,OAAO;AACd,MAAIE,OAAM,MAAM,IAAI,GAAG,QAAQA,OAAM;AACrC,MAAI,QAAQ,UAAW,cAAa,OAAO,YAAYA;AACzD;AAEA,SAAS,MAAM;AACb,MAAI,IAAI,KAAK,UAAU,IAAI,OAAO;AAClC,SAAO,IAAI;AACT,QAAI,GAAG,OAAO;AACZ,UAAI,OAAO,GAAG,MAAO,QAAO,GAAG;AAC/B,WAAK,IAAI,KAAK,GAAG;AAAA,IACnB,OAAO;AACL,WAAK,GAAG,OAAO,GAAG,QAAQ;AAC1B,WAAK,KAAK,GAAG,QAAQ,KAAK,WAAW;AAAA,IACvC;AAAA,EACF;AACA,aAAW;AACX,QAAM,IAAI;AACZ;AAEA,SAAS,MAAM,MAAM;AACnB,MAAI,MAAO;AACX,MAAI,QAAS,WAAU,aAAa,OAAO;AAC3C,MAAI,QAAQ,OAAO;AACnB,MAAI,QAAQ,IAAI;AACd,QAAI,OAAO,SAAU,WAAU,WAAW,MAAM,OAAO,MAAM,IAAI,IAAI,SAAS;AAC9E,QAAI,SAAU,YAAW,cAAc,QAAQ;AAAA,EACjD,OAAO;AACL,QAAI,CAAC,SAAU,aAAY,MAAM,IAAI,GAAG,WAAW,YAAY,MAAM,SAAS;AAC9E,YAAQ,GAAG,SAAS,IAAI;AAAA,EAC1B;AACF;;;AC5GA,IAAM,IAAI;AACV,IAAM,IAAI;AACV,IAAM,IAAI;AAEK,SAAR,cAAmB;AACxB,MAAI,IAAI;AACR,SAAO,OAAO,KAAK,IAAI,IAAI,KAAK,KAAK;AACvC;;;ACIA,IAAI,gBAAgB;AAApB,IACI,eAAe,KAAK,MAAM,IAAI,KAAK,KAAK,CAAC;AAE9B,SAAR,mBAAiB,OAAO;AAC7B,MAAI,YACA,QAAQ,GACR,WAAW,MACX,aAAa,IAAI,KAAK,IAAI,UAAU,IAAI,GAAG,GAC3C,cAAc,GACd,gBAAgB,KAChB,SAAS,oBAAI,IAAI,GACjB,UAAU,MAAM,IAAI,GACpB,QAAQ,iBAAS,QAAQ,KAAK,GAC9B,SAAS,YAAI;AAEjB,MAAI,SAAS,KAAM,SAAQ,CAAC;AAE5B,WAAS,OAAO;AACd,SAAK;AACL,UAAM,KAAK,QAAQ,UAAU;AAC7B,QAAI,QAAQ,UAAU;AACpB,cAAQ,KAAK;AACb,YAAM,KAAK,OAAO,UAAU;AAAA,IAC9B;AAAA,EACF;AAEA,WAAS,KAAK,YAAY;AACxB,QAAIC,IAAGC,KAAI,MAAM,QAAQ;AAEzB,QAAI,eAAe,OAAW,cAAa;AAE3C,aAASC,KAAI,GAAGA,KAAI,YAAY,EAAEA,IAAG;AACnC,gBAAU,cAAc,SAAS;AAEjC,aAAO,QAAQ,SAAS,OAAO;AAC7B,cAAM,KAAK;AAAA,MACb,CAAC;AAED,WAAKF,KAAI,GAAGA,KAAIC,IAAG,EAAED,IAAG;AACtB,eAAO,MAAMA,EAAC;AACd,YAAI,KAAK,MAAM,KAAM,MAAK,KAAK,KAAK,MAAM;AAAA,YACrC,MAAK,IAAI,KAAK,IAAI,KAAK,KAAK;AACjC,YAAI,KAAK,MAAM,KAAM,MAAK,KAAK,KAAK,MAAM;AAAA,YACrC,MAAK,IAAI,KAAK,IAAI,KAAK,KAAK;AAAA,MACnC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,kBAAkB;AACzB,aAASA,KAAI,GAAGC,KAAI,MAAM,QAAQ,MAAMD,KAAIC,IAAG,EAAED,IAAG;AAClD,aAAO,MAAMA,EAAC,GAAG,KAAK,QAAQA;AAC9B,UAAI,KAAK,MAAM,KAAM,MAAK,IAAI,KAAK;AACnC,UAAI,KAAK,MAAM,KAAM,MAAK,IAAI,KAAK;AACnC,UAAI,MAAM,KAAK,CAAC,KAAK,MAAM,KAAK,CAAC,GAAG;AAClC,YAAI,SAAS,gBAAgB,KAAK,KAAK,MAAMA,EAAC,GAAG,QAAQA,KAAI;AAC7D,aAAK,IAAI,SAAS,KAAK,IAAI,KAAK;AAChC,aAAK,IAAI,SAAS,KAAK,IAAI,KAAK;AAAA,MAClC;AACA,UAAI,MAAM,KAAK,EAAE,KAAK,MAAM,KAAK,EAAE,GAAG;AACpC,aAAK,KAAK,KAAK,KAAK;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAEA,WAAS,gBAAgB,OAAO;AAC9B,QAAI,MAAM,WAAY,OAAM,WAAW,OAAO,MAAM;AACpD,WAAO;AAAA,EACT;AAEA,kBAAgB;AAEhB,SAAO,aAAa;AAAA,IAClB;AAAA,IAEA,SAAS,WAAW;AAClB,aAAO,QAAQ,QAAQ,IAAI,GAAG;AAAA,IAChC;AAAA,IAEA,MAAM,WAAW;AACf,aAAO,QAAQ,KAAK,GAAG;AAAA,IACzB;AAAA,IAEA,OAAO,SAASG,IAAG;AACjB,aAAO,UAAU,UAAU,QAAQA,IAAG,gBAAgB,GAAG,OAAO,QAAQ,eAAe,GAAG,cAAc;AAAA,IAC1G;AAAA,IAEA,OAAO,SAASA,IAAG;AACjB,aAAO,UAAU,UAAU,QAAQ,CAACA,IAAG,cAAc;AAAA,IACvD;AAAA,IAEA,UAAU,SAASA,IAAG;AACpB,aAAO,UAAU,UAAU,WAAW,CAACA,IAAG,cAAc;AAAA,IAC1D;AAAA,IAEA,YAAY,SAASA,IAAG;AACtB,aAAO,UAAU,UAAU,aAAa,CAACA,IAAG,cAAc,CAAC;AAAA,IAC7D;AAAA,IAEA,aAAa,SAASA,IAAG;AACvB,aAAO,UAAU,UAAU,cAAc,CAACA,IAAG,cAAc;AAAA,IAC7D;AAAA,IAEA,eAAe,SAASA,IAAG;AACzB,aAAO,UAAU,UAAU,gBAAgB,IAAIA,IAAG,cAAc,IAAI;AAAA,IACtE;AAAA,IAEA,cAAc,SAASA,IAAG;AACxB,aAAO,UAAU,UAAU,SAASA,IAAG,OAAO,QAAQ,eAAe,GAAG,cAAc;AAAA,IACxF;AAAA,IAEA,OAAO,SAAS,MAAMA,IAAG;AACvB,aAAO,UAAU,SAAS,KAAMA,MAAK,OAAO,OAAO,OAAO,IAAI,IAAI,OAAO,IAAI,MAAM,gBAAgBA,EAAC,CAAC,GAAI,cAAc,OAAO,IAAI,IAAI;AAAA,IACxI;AAAA,IAEA,MAAM,SAASC,IAAGC,IAAG,QAAQ;AAC3B,UAAIL,KAAI,GACJC,KAAI,MAAM,QACV,IACA,IACA,IACA,MACA;AAEJ,UAAI,UAAU,KAAM,UAAS;AAAA,UACxB,WAAU;AAEf,WAAKD,KAAI,GAAGA,KAAIC,IAAG,EAAED,IAAG;AACtB,eAAO,MAAMA,EAAC;AACd,aAAKI,KAAI,KAAK;AACd,aAAKC,KAAI,KAAK;AACd,aAAK,KAAK,KAAK,KAAK;AACpB,YAAI,KAAK,OAAQ,WAAU,MAAM,SAAS;AAAA,MAC5C;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,IAAI,SAAS,MAAMF,IAAG;AACpB,aAAO,UAAU,SAAS,KAAK,MAAM,GAAG,MAAMA,EAAC,GAAG,cAAc,MAAM,GAAG,IAAI;AAAA,IAC/E;AAAA,EACF;AACF;;;ACzJe,SAARG,WAAiBC,IAAG;AACzB,MAAI,WAAW,iBAAS,GAAG,GACvB,OACA,WACA;AAEJ,MAAI,OAAOA,OAAM,WAAY,CAAAA,KAAI,iBAASA,MAAK,OAAO,IAAI,CAACA,EAAC;AAE5D,WAAS,MAAM,OAAO;AACpB,aAASC,KAAI,GAAGC,KAAI,MAAM,QAAQ,MAAMD,KAAIC,IAAG,EAAED,IAAG;AAClD,aAAO,MAAMA,EAAC,GAAG,KAAK,OAAO,GAAGA,EAAC,IAAI,KAAK,KAAK,UAAUA,EAAC,IAAI;AAAA,IAChE;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC,MAAO;AACZ,QAAIA,IAAGC,KAAI,MAAM;AACjB,gBAAY,IAAI,MAAMA,EAAC;AACvB,SAAK,IAAI,MAAMA,EAAC;AAChB,SAAKD,KAAI,GAAGA,KAAIC,IAAG,EAAED,IAAG;AACtB,gBAAUA,EAAC,IAAI,MAAM,GAAGA,EAAC,IAAI,CAACD,GAAE,MAAMC,EAAC,GAAGA,IAAG,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,MAAMA,EAAC,GAAGA,IAAG,KAAK;AAAA,IACzF;AAAA,EACF;AAEA,QAAM,aAAa,SAASE,IAAG;AAC7B,YAAQA;AACR,eAAW;AAAA,EACb;AAEA,QAAM,WAAW,SAASA,IAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAOA,OAAM,aAAaA,KAAI,iBAAS,CAACA,EAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EAC3G;AAEA,QAAM,IAAI,SAASA,IAAG;AACpB,WAAO,UAAU,UAAUH,KAAI,OAAOG,OAAM,aAAaA,KAAI,iBAAS,CAACA,EAAC,GAAG,WAAW,GAAG,SAASH;AAAA,EACpG;AAEA,SAAO;AACT;;;ACtCe,SAARI,WAAiBC,IAAG;AACzB,MAAI,WAAW,iBAAS,GAAG,GACvB,OACA,WACA;AAEJ,MAAI,OAAOA,OAAM,WAAY,CAAAA,KAAI,iBAASA,MAAK,OAAO,IAAI,CAACA,EAAC;AAE5D,WAAS,MAAM,OAAO;AACpB,aAASC,KAAI,GAAGC,KAAI,MAAM,QAAQ,MAAMD,KAAIC,IAAG,EAAED,IAAG;AAClD,aAAO,MAAMA,EAAC,GAAG,KAAK,OAAO,GAAGA,EAAC,IAAI,KAAK,KAAK,UAAUA,EAAC,IAAI;AAAA,IAChE;AAAA,EACF;AAEA,WAAS,aAAa;AACpB,QAAI,CAAC,MAAO;AACZ,QAAIA,IAAGC,KAAI,MAAM;AACjB,gBAAY,IAAI,MAAMA,EAAC;AACvB,SAAK,IAAI,MAAMA,EAAC;AAChB,SAAKD,KAAI,GAAGA,KAAIC,IAAG,EAAED,IAAG;AACtB,gBAAUA,EAAC,IAAI,MAAM,GAAGA,EAAC,IAAI,CAACD,GAAE,MAAMC,EAAC,GAAGA,IAAG,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,MAAMA,EAAC,GAAGA,IAAG,KAAK;AAAA,IACzF;AAAA,EACF;AAEA,QAAM,aAAa,SAASE,IAAG;AAC7B,YAAQA;AACR,eAAW;AAAA,EACb;AAEA,QAAM,WAAW,SAASA,IAAG;AAC3B,WAAO,UAAU,UAAU,WAAW,OAAOA,OAAM,aAAaA,KAAI,iBAAS,CAACA,EAAC,GAAG,WAAW,GAAG,SAAS;AAAA,EAC3G;AAEA,QAAM,IAAI,SAASA,IAAG;AACpB,WAAO,UAAU,UAAUH,KAAI,OAAOG,OAAM,aAAaA,KAAI,iBAAS,CAACA,EAAC,GAAG,WAAW,GAAG,SAASH;AAAA,EACpG;AAEA,SAAO;AACT;;;;;;;;;;;;;;;;;;;ICrCaI,IAAmB,SAAHC,IAAAA;AAAA,MACzBC,KAAED,GAAFC,IACAC,KAAcF,GAAdE,gBACAC,KAAKH,GAALG;AAAK,aAELC,mBAAAA,KAACC,GAAY,EAACJ,IAAIA,IAAIK,OAAOJ,IAAgBK,YAAAA,MAAkBJ,OAAOA,GAAAA,CAAAA;AAAS;ICJtEK,KAAe,EACxBP,IAAI,MACJK,OAAO,SACPG,YAAY,EAAEC,MAAM,UAAUC,KAAK,GAAGC,KAAK,OAAA,GAC3CC,SAAS,SACTC,MAAM,GACNC,SAAS,GACTC,QAAQ,YACRC,KAAK,GACLC,eAAe,GACfC,sBAAsB,KACtBC,QAAQ,EAAEC,QAAQ,OAAA,GAClBC,SAAS,SACTC,aAAa,GACbC,aAAa,oBACbC,QAAQ,CAAC,QAAQ,QAAQ,WAAW,eAAe,MAAA,GACnDC,aAAAA,MACAC,aAAAA,MACAC,SAAS,CAAE,GACXC,WAAW,CAAE,GACbC,YAAY,CAAE,GACdC,UAAU,CAAE,GACZC,eAAAA,MACAC,SAAAA,OACAC,WAAAA,OACAC,SAASpC,GACTqC,SAAAA,MACAC,cAAc,UACdC,aAAa,CAAA,GACbC,MAAM,OACNC,YAA8B,eAAA,OAAXC,UAAgD,SAA1BC,IAAGD,OAAOE,oBAAgBD,IAAQ,EAAA;ICTlEE,KAAsB,SAAH5C,IAAAA;AAY1B,MAXF6C,KAAK7C,GAAL6C,OACAC,KAAM9C,GAAN8C,QACAC,KAAI/C,GAAJ+C,MACAC,KAAMhD,GAANgD,QACA/B,KAAGjB,GAAHiB;AAQA,MAAA,CAAKgC,MAAMC,QAAQF,EAAAA,KAA6B,MAAlBA,GAAOG,OACjC,OAAM,IAAIC,MAAK,0DAAA;AAGnB,MAEIC,IAFEC,KAAaN,GAAOG;AAGb,UAATJ,KACAM,MAAaP,KAAS7B,MAAOqC,KAAa,MAAMA,KAChC,QAATP,OACPM,MAAaR,KAAQ5B,MAAOqC,KAAa,MAAMA;AAGnD,MAAMC,IAAQP,GAAOQ,IAAI,SAACC,IAAGC,IAAAA;AAAC,WAAKA,MAAKL,KAAYpC,MAAOoC,KAAY;EAAA,CAAA;AAEvE,SAAOM,QAAaJ,CAAAA,EAAOK,OAAOZ,EAAAA;AACtC;IAEaa,KAAoB,SAAHC,IAAAA;AAcxB,MAbFjB,KAAKiB,GAALjB,OACAC,KAAMgB,GAANhB,QACAC,KAAIe,GAAJf,MACAgB,KAAQD,GAARC,UACAC,KAAKF,GAALE,OAUMC,KATFH,GAAJI,KASoBV,IAAIO,EAAAA;AAExB,MAAmB,WAAfC,GAAMtD,MAAiB;AACvB,QAAMyD,KAAS,CACX,EAAED,MAAMD,GAAOT,IAAI,SAAAlD,IAAAA;AAAK,UAAA8D;AAAA,aAAK,EAAEF,OAAIE,KAAA,EAAIC,GAAG,MAAMC,GAAG,KAAA,GAAIF,GAAGrB,EAAAA,IAAOzC,IAAK8D,IAAAA;IAAAA,CAAAA,EAAAA,CAAAA,GAEpEG,IAAOC,GAAmBL,IAAQpB,IAAMiB,EAAAA;AAE9C,WAAOS,GAAaT,IAAOO,GAAe,QAATxB,KAAeF,KAAQC,IAAQC,EAAAA;EAGpE;AAEA,MAAMpC,IAAM+D,KAAK/D,IAAGgE,MAARD,MAAaT,EAAAA,GACnBrD,KAAM8D,KAAK9D,IAAG+D,MAARD,MAAaT,EAAAA;AAEzB,SAAOQ,GACHT,IACA,EAAEY,KAAKX,IAAQtD,KAAAA,GAAKC,KAAAA,GAAAA,GACX,QAATmC,KAAeF,KAAQC,IACvBC,EAAAA;AAER;IAEa8B,KAAmB,SAAW/D,IAAAA;AAEvC,MAAoB,cAAA,OAATA,GACP,QAAOA;AAIX,UAAIgE,gBAAAA,SAAShE,EAAAA,EACT,QAAO,WAAA;AAAA,WAAMA;EAAI;AAIrB,UAAIiE,qBAAAA,SAAcjE,EAAAA,GAAO;AACrB,QAAA,KAAKkE,gBAAAA,SAASlE,GAAKmE,GAAAA,EACf,OAAM,IAAI7B,MACN,gGAAA;AAGR,QAAA,CAAKH,MAAMC,QAAQpC,GAAKmD,MAAAA,KAAkC,MAAvBnD,GAAKmD,OAAOd,OAC3C,OAAM,IAAIC,MACN,oFAAA;AAGR,QAAA,CAAKH,MAAMC,QAAQpC,GAAKoE,KAAAA,KAAgC,MAAtBpE,GAAKoE,MAAM/B,OACzC,OAAM,IAAIC,MACN,mFAAA;AAIR,QAAM+B,KAAYC,OAAAA,EACbxB,OAAO,CAAC9C,GAAKmD,OAAO,CAAA,GAAInD,GAAKmD,OAAO,CAAA,CAAA,CAAA,EACpCV,MAAM,CAACzC,GAAKoE,MAAM,CAAA,GAAIpE,GAAKoE,MAAM,CAAA,CAAA,CAAA;AAEtC,WAAO,SAACG,IAAAA;AAAW,aAAKF,OAAUG,WAAAA,SAAID,IAAGvE,GAAKmE,GAAAA,CAAAA;IAAK;EACvD;AAEA,QAAM,IAAI7B,MAAM,wEAAA;AACpB;IAEamC,KAAgB,SAAHC,IAAAA;AAYQ,MAG1BC,IACAC,IAfJ3C,KAAIyC,GAAJzC,MACAtC,KAAU+E,GAAV/E,YACAkF,KAAYH,GAAZG,cACA5E,KAAOyE,GAAPzE,SACAG,KAAasE,GAAbtE,eAQM0E,IAAiBC,gBAA2C,SAAAR,IAAAA;AAAC,WAAIA,GAAEvE,OAAO,IAAIC,KAAU;EAAA,CAAA;AAI9F,MAAa,QAATgC,GACA0C,CAAAA,KAASK,WAAqC,SAAAT,IAAAA;AAAC,WAAI5E,GAAW4E,GAAE/E,KAAAA;EAAM,CAAA,EAAEyF,SACpE7E,EAAAA,GAEJwE,KAASM,WAAqC,SAAAX,IAAAA;AAAC,WAAIM,GAAaN,GAAEY,KAAAA;EAAAA,CAAAA;OAC/D;AAAA,QAAa,QAATlD,GAMP,OAAM,IAAIK,MAAgCL,4BAAAA,EAAAA;AAL1C0C,IAAAA,KAASK,WAAqC,SAAAT,IAAAA;AAAC,aAAIM,GAAaN,GAAEY,KAAAA;IAAAA,CAAAA,GAClEP,KAASM,WAAqC,SAAAX,IAAAA;AAAC,aAAI5E,GAAW4E,GAAE/E,KAAAA;IAAM,CAAA,EAAEyF,SACpE7E,EAAAA;EAIR;AAEA,SAAO,EAAEmD,GAAGoB,IAAQnB,GAAGoB,IAAQQ,WAAWN,EAAAA;AAC9C;IAEaO,KAAe,SAAHC,IAAAA;AAwBnB,MAAAC,IA/KkBC,IAwJpBpC,KAAIkC,GAAJlC,MACAqC,KAAKH,GAALG,OACAvF,KAAMoF,GAANpF,QACA+C,KAAQqC,GAARrC,UACAtD,KAAU2F,GAAV3F,YACA+F,IAAQJ,GAARI,UACAb,IAAYS,GAAZT,cACAc,KAAOL,GAAPK,SACAC,IAAMN,GAANM,QACAvF,IAAoBiF,GAApBjF,sBACAwF,IAAgBP,GAAhBO,kBAcMC,IAAS,EACXC,YAAY,CAAC,KAAK,GAAA,GAClBC,UAAU,CAAC,KAAK,GAAA,EAAA,GAGdC,IApLiB,YADHT,KAqLcK,GApLpBjG,QAAwC,aAArB4F,GAAUU,SAChCC,EAAqBX,EAAAA,IAGzB,SAAIhG,IAAAA;AAAQ,WAAKA;EAAK,GAkLvB4G,IAAiDhD,GAAKV,IAAI,SAAA6B,IAAAA;AAAC,WAAK,EAClEpF,IAAIsG,GAAMlB,EAAAA,GACVY,OAAOO,EAASnB,EAAAA,GAChB/E,OAAOyG,EAAWhD,GAASsB,EAAAA,CAAAA,GAC3BvE,MAAM2F,GAAQpB,EAAAA,GACdnB,MAAIiD,EAAA,CAAA,GAAO9B,EAAAA,EAAAA;EACd,CAAA,GAEK+B,KAAaC,mBAA8CH,CAAAA,EAC5DI,MAAM,KAAKZ,EAAOrC,CAAAA,EAClBiD,MAAM,KAAKZ,EAAOpC,CAAAA,EAClBgD,MAAM,WAAWZ,EAAOR,SAAAA,EACxBqB,KAAAA;AAIL,SAFAH,GAAWI,KAAKrG,CAAAA,IAEhBkF,KAAAA,CAAAA,GACQO,EAAO5F,EAAAA,EAAQ,CAAA,IAAYP,OAAAA,IAAAA,IAAU4F,GACrCO,EAAO5F,EAAAA,EAAQ,CAAA,IAAY2E,OAAAA,IAAAA,GAAYU,GAC3CoB,QAAOL,GAAWK,MAAAA,GAAOpB;AAEjC;ICvMaqB,KAAgB,SAAH1H,IAAAA;AAAA,MACtB6C,KAAK7C,GAAL6C,OACAC,KAAM9C,GAAN8C,QACAC,KAAI/C,GAAJ+C,MACAgB,KAAQ/D,GAAR+D,UACAC,KAAKhE,GAALgE,OACAE,KAAIlE,GAAJkE;AAAI,aASJyD,aAAAA,SACI,WAAA;AAAA,WACI9D,GAA4B,EACxBhB,OAAAA,IACAC,QAAAA,IACAC,MAAAA,IACAgB,UAAAA,IACAC,OAAAA,IACAE,MAAAA,GAAAA,CAAAA;EACF,GACN,CAACrB,IAAOC,IAAQC,IAAMgB,IAAUC,IAAOE,EAAAA,CAAAA;AAC1C;IAEQ0D,KAAkB,SAAH9D,IAAAA;AAAA,MACxBjB,KAAKiB,GAALjB,OACAC,KAAMgB,GAANhB,QACAC,KAAIe,GAAJf,MACAC,KAAMc,GAANd,QACA/B,KAAG6C,GAAH7C;AAAG,aAQH0G,aAAAA,SACI,WAAA;AAAA,WAAM/E,GAAoB,EAAEC,OAAAA,IAAOC,QAAAA,IAAQC,MAAAA,IAAMC,QAAAA,IAAQ/B,KAAAA,GAAAA,CAAAA;EAAAA,GACzD,CAAC4B,IAAOC,IAAQC,IAAMC,IAAQ/B,EAAAA,CAAAA;AACjC;IAKQ4G,KAAY,SAAHrC,IAAAA;AAAA,MAClBzC,KAAIyC,GAAJzC,MACAtC,KAAU+E,GAAV/E,YACAkF,KAAYH,GAAZG,cACA5E,KAAOyE,GAAPzE,SACAG,KAAasE,GAAbtE;AAAa,aAQbyG,aAAAA,SACI,WAAA;AAAA,WACIpC,GAAwB,EACpBxC,MAAAA,IACAtC,YAAAA,IACAkF,cAAAA,IACA5E,SAAAA,IACAG,eAAAA,GAAAA,CAAAA;EAAAA,GAER,CAAC6B,IAAMtC,IAAYkF,IAAc5E,IAASG,EAAAA,CAAAA;AAC7C;IAEQ4G,KAAe,SAAH1B,IAAAA;AAoCnB,MAnCFlC,KAAIkC,GAAJlC,MACArB,KAAKuD,GAALvD,OACAC,KAAMsD,GAANtD,QACA7C,KAAEmG,GAAFnG,IACAK,KAAK8F,GAAL9F,OACAyH,KAAW3B,GAAX2B,aACYpB,KAAgBP,GAA5B3F,YACAuC,IAAMoD,GAANpD,QACAnC,IAAOuF,GAAPvF,SACAC,IAAIsF,GAAJtF,MACAC,IAAOqF,GAAPrF,SACAC,IAAMoF,GAANpF,QACAC,IAAGmF,GAAHnF,KACAC,KAAakF,GAAblF,eACAC,KAAoBiF,GAApBjF,sBACAC,KAAMgF,GAANhF,QACAE,KAAO8E,GAAP9E,SAoBMyB,IAAkB,iBAAX/B,IAA0B,MAAM,KAEvCuF,IAAQyB,GAAsC/H,EAAAA,GAC9C8D,KAAWiE,GAAoB1H,EAAAA,GAC/B2H,KAAcC,GAAkBH,EAAAA,GAChCvB,KAAWwB,GAAsCnH,CAAAA,GACjD4F,KAvEM,SAAW3F,IAAAA;AAAwB,eAC/C6G,aAAAA,SAAQ,WAAA;AAAA,aAAM9C,GAA2B/D,EAAAA;IAAAA,GAAO,CAACA,EAAAA,CAAAA;EAAM,EAsErBA,CAAAA,GAC5BqH,KAAaH,GAAoE1G,EAAAA,GACjF8G,KAAWC,GACbjH,IACA+G,EAAAA,GAGE1H,KAAaiH,GAAc,EAC7B7E,OAAAA,IACAC,QAAAA,IACAC,MAAAA,GACAgB,UAAAA,IACAC,OAAO2C,IACPzC,MAAAA,GAAAA,CAAAA,GAGEyB,IAAeiC,GAAgB,EACjC/E,OAAAA,IACAC,QAAAA,IACAC,MAAAA,GACAC,QAAAA,GACA/B,KAAAA,EAAAA,CAAAA,GAGEyF,IAASmB,GAAoB,EAC/B9E,MAAAA,GACAtC,YAAAA,IACAkF,cAAAA,GACA5E,SAAAA,GACAG,eAAAA,GAAAA,CAAAA,GAGJoH,QAAkCX,aAAAA,SAC9B,WAAA;AAAA,WACIxB,GAAuB,EACnBjC,MAAAA,IACAqC,OAAAA,GACAvF,QAAAA,GACA+C,UAAAA,IACAtD,YAAAA,IACA+F,UAAAA,IACAb,cAAAA,GACAc,SAAAA,IACAC,QAAAA,GACAvF,sBAAAA,IACAwF,kBAAAA,GAAAA,CAAAA;EAER,GAAA,CACIzC,IACAqC,GACAvF,GACA+C,IACAtD,IACA+F,IACAb,GACAc,IACAC,GACAvF,IACAwF,EAAAA,CAAAA,GA1BAc,KAAKa,EAALb,OAAOc,KAAMD,EAANC,QAAQC,KAAMF,EAANE;AAwCvB,SAAO,EACHf,WAX8CE,aAAAA,SAC9C,WAAA;AAAA,WACIF,GAAMjE,IAAI,SAAAiF,IAAAA;AAAI,aAAAtB,EAAAA,CAAAA,GACPsB,IAAI,EACPvI,gBAAgB+H,GAAYQ,GAAKnI,KAAAA,GACjCH,OAAOiI,GAASK,EAAAA,EAAAA,CAAAA;IAAK,CAAA;EACtB,GACP,CAAChB,IAAOQ,IAAaG,EAAAA,CAAAA,GAKrBG,QAAAA,IACAC,QAAAA,IACAJ,UAAAA,GAAAA;AAER;IAEaM,KAAiB,SAC1BnH,IAAAA;AAA0D,aAE1DoG,aAAAA,SAAQ,WAAA;AACJ,WAA2B,cAAA,OAAhBpG,KAAmCA,KACvC,WAAA;AAAA,aAAMA;IAAW;EAC5B,GAAG,CAACA,EAAAA,CAAAA;AAAa;IAERoH,KAAuB,SAAHtC,IAAAA;AAOkE,MAN/FrE,KAAaqE,GAAbrE,eACA4G,KAAOvC,GAAPuC,SACAC,KAAYxC,GAAZwC,cACAC,KAAYzC,GAAZyC,cACAC,KAAW1C,GAAX0C,aACA5G,KAAOkE,GAAPlE,SAEA6G,IAA8CC,EAAAA,GAAtCC,IAAoBF,EAApBE,sBAAsBC,KAAWH,EAAXG;AAyC9B,SAAO,EACHN,kBAxCsBO,aAAAA,aACtB,SAACX,IAA+BY,IAAAA;AACvBrH,IAAAA,OAELkH,EAAqB/G,GAAQsG,EAAAA,GAAOY,EAAAA,GAAAA,QACpCR,MAAAA,GAAeJ,IAAMY,EAAAA;EACxB,GACD,CAACrH,IAAe6G,IAAcK,GAAsB/G,EAAAA,CAAAA,GAkCpD4G,iBA/BqBK,aAAAA,aACrB,SAACX,IAA+BY,IAAAA;AACvBrH,IAAAA,OAELkH,EAAqB/G,GAAQsG,EAAAA,GAAOY,EAAAA,GAAAA,QACpCN,MAAAA,GAAcN,IAAMY,EAAAA;EACvB,GACD,CAACrH,IAAe+G,IAAaG,GAAsB/G,EAAAA,CAAAA,GAyBnD2G,kBAtBsBM,aAAAA,aACtB,SAACX,IAA+BY,IAAAA;AACvBrH,IAAAA,OAELmH,GAAAA,GAAAA,QACAL,MAAAA,GAAeL,IAAMY,EAAAA;EACxB,GACD,CAACrH,IAAemH,IAAaL,EAAAA,CAAAA,GAgB7BF,aAbiBQ,aAAAA,aACjB,SAACX,IAA+BY,IAAAA;AACvBrH,IAAAA,OAAAA,QAEL4G,MAAAA,GAAUH,IAAMY,EAAAA;EACpB,GACA,CAACrH,IAAe4G,EAAAA,CAAAA,EAAAA;AASxB;IAEMU,KAA4B,SAACb,IAAAA;AAA4B,SAAM,EACjEpE,GAAGoE,GAAKpE,GACRC,GAAGmE,GAAKnE,EAAAA;AACX;IAEKiF,KAA8B,SAACd,IAAAA;AAA4B,SAAM,EACnE3H,MAAM2H,GAAK3H,MACX+B,OAAO4F,GAAK3H,MACZgC,QAAQ2F,GAAK3H,KAAAA;AAChB;IAEY0I,KAA0B,SACnC/B,IACAnF,IAAAA;AAAyD,SAEzDmH,EAAwC,EACpCvF,MAAMuD,IACNnF,aAAAA,IACAoH,aAAaJ,IACbK,eAAeJ,GAAAA,CAAAA;AACjB;IAEOK,KAA2B,SAAHC,IAAAA;AAAA,MAOjCpC,KAAKoC,GAALpC,OACAc,KAAMsB,GAANtB,QACAC,KAAMqB,GAANrB,QACAsB,KAAUD,GAAVC,YACAC,KAAWF,GAAXE,aACAC,KAAUH,GAAVG,YACAC,IAAWJ,GAAXI,aACAC,IAAML,GAANK;AAAM,aAENvC,aAAAA,SACI,WAAA;AAAA,WAAO,EACHF,OAAAA,IACAc,QAAAA,IACAC,QAAAA,IACAsB,YAAAA,IACAC,aAAAA,IACAC,YAAAA,IACAC,aAAAA,GACAC,QAAAA,EAAAA;EACH,GACD,CAACzC,IAAOc,IAAQC,IAAQsB,IAAYC,IAAaC,IAAYC,GAAaC,CAAAA,CAAAA;AAC7E;ICvRQC,KAAU,SAAHnK,IAAAA;AAWU,MAV1ByH,KAAKzH,GAALyH,OACAlG,KAAWvB,GAAXuB,aACAC,KAAWxB,GAAXwB,aACA4I,KAASpK,GAAToK,WACApI,IAAahC,GAAbgC,eACA6G,IAAY7I,GAAZ6I,cACAE,IAAW/I,GAAX+I,aACAD,IAAY9I,GAAZ8I,cACAF,IAAO5I,GAAP4I,SACAzG,IAAOnC,GAAPmC,SAEA6G,IAA8CC,EAAAA,GAAtCC,KAAoBF,EAApBE,sBAAsBC,KAAWH,EAAXG,aAExBkB,SAAmB1C,aAAAA,SAAQ,WAAA;AAC7B,QAAK3F,EAEL,QAAO,SAACyG,IAA+BY,IAAAA;AACnCH,MAAAA,OAAqBoB,aAAAA,eAAcnI,GAASsG,EAAAA,GAAOY,EAAAA,GAAAA,QACnDR,KAAAA,EAAeJ,IAAMY,EAAAA;IAAAA;EAE5B,GAAE,CAACrH,GAAekH,IAAsB/G,GAAS0G,CAAAA,CAAAA,GAE5C0B,SAAkB5C,aAAAA,SAAQ,WAAA;AAC5B,QAAK3F,EAEL,QAAO,SAACyG,IAA+BY,IAAAA;AACnCH,MAAAA,OAAqBoB,aAAAA,eAAcnI,GAASsG,EAAAA,GAAOY,EAAAA,GAAAA,QACnDN,KAAAA,EAAcN,IAAMY,EAAAA;IAAAA;EAE3B,GAAE,CAACrH,GAAekH,IAAsB/G,GAAS4G,CAAAA,CAAAA,GAE5CyB,QAAmB7C,aAAAA,SAAQ,WAAA;AAC7B,QAAK3F,EAEL,QAAO,SAACyG,IAA+BY,IAAAA;AACnCF,MAAAA,GAAAA,GAAAA,QACAL,KAAAA,EAAeL,IAAMY,EAAAA;IAAAA;EAE5B,GAAE,CAACrH,GAAemH,IAAaL,CAAAA,CAAAA,GAE1B2B,QAAc9C,aAAAA,SAAQ,WAAA;AACxB,QAAK3F,EAEL,QAAO,SAACyG,IAA+BY,IAAAA;AAAAA,cACnCT,KAAAA,EAAUH,IAAMY,EAAAA;IAAAA;EAExB,GAAG,CAACrH,GAAe4G,CAAAA,CAAAA,GAEnB8B,KAA0CC,GAAAA,GAAlCvI,KAAOsI,GAAPtI,SAAiBwI,KAAYF,GAApB9D,QAEXiE,KAAQC,GAAAA,GACRC,IAAiBrC,GAAyBnH,EAAAA,GAC1CyJ,IAAiBC,GAA2CzJ,IAAaqJ,EAAAA,GAEzEK,QAAmBvD,aAAAA,SACrB,WAAA;AAAA,WArFoB,yBACxBqD,IAAAA;AAAyD,aACvD,EACFG,OAAO,SAAC1C,IAAAA;AAA6B,eAAM,EACvCpE,GAAGoE,GAAKpE,GACRC,GAAGmE,GAAKnE,GACR8G,QAAQ,GACRjL,OAAOsI,GAAKtI,OACZqB,aAAawJ,GAAevC,EAAAA,GAC5B4C,SAAS,EAAA;MACX,GACFC,QAAQ,SAAC7C,IAAAA;AAA6B,eAAM,EACxCpE,GAAGoE,GAAKpE,GACRC,GAAGmE,GAAKnE,GACR8G,QAAQ3C,GAAK3H,OAAO,GACpBX,OAAOsI,GAAKtI,OACZqB,aAAawJ,GAAevC,EAAAA,GAC5B4C,SAAS,EAAA;MACX,GACFE,OAAO,SAAC9C,IAAAA;AAA6B,eAAM,EACvCpE,GAAGoE,GAAKpE,GACRC,GAAGmE,GAAKnE,GACR8G,QAAQ,GACRjL,OAAOsI,GAAKtI,OACZqB,aAAawJ,GAAevC,EAAAA,GAC5B4C,SAAS,EAAA;MACZ,EAAA;IACJ,EA0D2CL,CAAAA;EAAAA,GACpC,CAACA,CAAAA,CAAAA,GAGCQ,KAAaC,cAUjBhE,IAAO,EACLiE,MAAM,SAAAjD,IAAAA;AAAI,WAAIA,GAAKxI;EAAE,GACrB0L,SAAST,EAAiBI,QAC1BM,MAAMV,EAAiBC,OACvBA,OAAOD,EAAiBI,QACxBA,QAAQJ,EAAiBI,QACzBC,OAAOL,EAAiBK,OACxB3E,QAAQgE,IACRiB,WAAAA,CAAYzJ,GAAAA,CAAAA;AAGhB,aACIhC,mBAAAA,KAAA0L,mBAAAA,UAAA,EAAAC,UACKP,GAAW,SAACQ,IAAiBvD,IAAAA;AAC1B,WAAa6B,gBAAcF,IAAW,EAClCnF,KAAKwD,GAAKxI,IACVwI,MAAAA,IACAwD,OAAK9E,EAAA,CAAA,GACE6E,IAAe,EAClBZ,SAlIUc,KAkIgBF,GAAgBZ,QAjI9De,GAAG,CAACD,EAAAA,GAAc,SAAAd,IAAAA;AAAM,aAAI1G,KAAK9D,IAAI,GAAGwK,EAAAA;IAAAA,CAAAA,IAkIpB7J,aAAawJ,EAAetC,EAAAA,EAAAA,CAAAA,GAEhCI,cAAcwB,IACdtB,aAAawB,IACbzB,cAAc0B,GACd5B,SAAS6B,EAAAA,CAAAA;AAxII,QAACyB;EAAAA,CAAAA,EAAAA,CAAAA;AA6IlC;ICxJaE,KAAY,SAAHpM,IAAAA;AAOO,MANzByI,KAAIzI,GAAJyI,MACAwD,KAAKjM,GAALiM,OACApD,KAAY7I,GAAZ6I,cACAE,KAAW/I,GAAX+I,aACAD,KAAY9I,GAAZ8I,cACAF,KAAO5I,GAAP4I;AAEA,aACIxI,mBAAAA,KAACiM,SAASC,QAAM,EAEZC,IAAIN,GAAM5H,GACVmI,IAAIP,GAAM3H,GACVmI,GAAGR,GAAMb,QACTsB,MAAMT,GAAM9L,OACZwM,QAAQV,GAAMzK,aACdoL,aAAaX,GAAM1K,aACnB8J,SAASY,GAAMZ,SACfxC,cAAc,SAAAQ,IAAAA;AAAK,WAAIR,QAAAA,KAAAA,SAAAA,GAAeJ,IAAMY,EAAAA;EAAO,GACnDN,aAAa,SAAAM,IAAAA;AAAK,WAAIN,QAAAA,KAAAA,SAAAA,GAAcN,IAAMY,EAAAA;EAAO,GACjDP,cAAc,SAAAO,IAAAA;AAAK,WAAIP,QAAAA,KAAAA,SAAAA,GAAeL,IAAMY,EAAAA;EAAO,GACnDT,SAAS,SAAAS,IAAAA;AAAK,WAAIT,QAAAA,KAAAA,SAAAA,GAAUH,IAAMY,EAAAA;EAAM,EAAA,GAXnCZ,GAAKxI,EAAAA;AActB;ICvBa4M,KAAuB,SAAH7M,IAAAA;AAM3B,MALFyH,KAAKzH,GAALyH,OACAnF,KAAWtC,GAAXsC,aAKMwK,KAAmBtD,GAAkC/B,IAAOnF,EAAAA;AAElE,aACIlC,mBAAAA,KAAA0L,mBAAAA,UAAA,EAAAC,UACKe,GAAiBtJ,IAAI,SAACuJ,IAAYrJ,IAAAA;AAAC,eAChCtD,mBAAAA,KAAC4M,GAAU7F,EAAa4F,CAAAA,GAAAA,EAAAA,GAAPrJ,EAAAA;EAAAA,CAAAA,EAAAA,CAAAA;AAIjC;IAAA,KAAA,CAAA,OAAA;IAAA,KAAA,CAAA,SAAA,iBAAA,WAAA,gBAAA,eAAA;ICCMuJ,KAAiB,SAAHjN,IAAAA;AAyCiB,MAxCjCkE,KAAIlE,GAAJkE,MACArB,KAAK7C,GAAL6C,OACAC,KAAM9C,GAAN8C,QACQoK,KAAalN,GAArBkK,QAAMiD,KAAAnN,GACNC,IAAAA,IAAAA,WAAEkN,KAAG3M,GAAaP,KAAEkN,IAAAC,IAAApN,GACpBM,OAAAA,KAAAA,WAAK8M,IAAG5M,GAAaF,QAAK8M,GAAAC,IAAArN,GAC1BS,YAAAA,IAAAA,WAAU4M,IAAG7M,GAAaC,aAAU4M,GACpCtF,IAAW/H,GAAX+H,aACA/E,IAAMhD,GAANgD,QAAMsK,KAAAtN,GACNa,SAAAA,KAAAA,WAAOyM,KAAG9M,GAAaK,UAAOyM,IAAAC,IAAAvN,GAC9Bc,MAAAA,KAAAA,WAAIyM,IAAG/M,GAAaM,OAAIyM,GAAAC,KAAAxN,GACxBkB,eAAAA,KAAAA,WAAasM,KAAGhN,GAAaU,gBAAasM,IAAAC,KAAAzN,GAC1CmB,sBAAAA,KAAAA,WAAoBsM,KAAGjN,GAAaW,uBAAoBsM,IAAAC,KAAA1N,GACxDoB,QAAAA,IAAAA,WAAMsM,KAAGlN,GAAaY,SAAMsM,IAAAC,IAAA3N,GAC5BsB,SAAAA,IAAAA,WAAOqM,IAAGnN,GAAac,UAAOqM,GAAAC,IAAA5N,GAC9BwB,aAAAA,KAAAA,WAAWoM,IAAGpN,GAAagB,cAAWoM,GAAAC,KAAA7N,GACtCuB,aAAAA,KAAAA,WAAWsM,KAAGrN,GAAae,cAAWsM,IAAAC,KAAA9N,GACtCgB,QAAAA,KAAAA,WAAM8M,KAAGtN,GAAaQ,SAAM8M,IAAAC,IAAA/N,GAC5Be,SAAAA,IAAAA,WAAOgN,IAAGvN,GAAaO,UAAOgN,GAAAC,IAAAhO,GAC9BiB,KAAAA,IAAAA,WAAG+M,IAAGxN,GAAaS,MAAG+M,GAAAC,IAAAjO,GACtByB,QAAAA,IAAAA,WAAMwM,IAAGzN,GAAaiB,SAAMwM,GAAAC,IAAAlO,GAC5BmO,iBAAAA,IAAAA,WAAeD,IAAG9B,KAAS8B,GAAAE,IAAApO,GAC3BiC,SAAAA,IAAAA,WAAOmM,IAAG5N,GAAayB,UAAOmM,GAAAC,KAAArO,GAC9BkC,WAAAA,KAAAA,WAASmM,KAAG7N,GAAa0B,YAASmM,IAAAC,KAAAtO,GAClC0B,aAAAA,KAAAA,WAAW4M,KAAG9N,GAAakB,cAAW4M,IACtCC,MAAWvO,GAAXuO,aAAWC,MAAAxO,GACX2B,aAAAA,MAAAA,WAAW6M,MAAGhO,GAAamB,cAAW6M,KACtCC,MAAWzO,GAAXyO,aAAWC,MAAA1O,GACX4B,SAAAA,MAAAA,WAAO8M,MAAGlO,GAAaoB,UAAO8M,KAAAC,MAAA3O,GAC9B6B,WAAAA,MAAAA,WAAS8M,MAAGnO,GAAaqB,YAAS8M,KAAAC,MAAA5O,GAClC8B,YAAAA,MAAAA,WAAU8M,MAAGpO,GAAasB,aAAU8M,KAAAC,MAAA7O,GACpC+B,UAAAA,MAAAA,WAAQ8M,MAAGrO,GAAauB,WAAQ8M,KAChC7M,MAAahC,GAAbgC,eACA6G,MAAY7I,GAAZ6I,cACAE,MAAW/I,GAAX+I,aACAD,MAAY9I,GAAZ8I,cACAF,MAAO5I,GAAP4I,SAAOkG,MAAA9O,GACPmC,SAAAA,MAAAA,WAAO2M,MAAGtO,GAAa2B,UAAO2M,KAAAC,MAAA/O,GAC9BsC,aAAAA,MAAAA,WAAWyM,MAAGvO,GAAa8B,cAAWyM,KAAAC,MAAAhP,GACtCuC,MAAAA,KAAAA,WAAIyM,MAAGxO,GAAa+B,OAAIyM,KAExBC,KAAqEC,GACjErM,IACAC,IACAoK,EAAAA,GAHIlD,KAAUiF,GAAVjF,YAAYC,KAAWgF,GAAXhF,aAAaC,KAAM+E,GAAN/E,QAAQJ,KAAUmF,GAAVnF,YAAYC,KAAWkF,GAAXlF,aAMrDoF,KAA4BrH,GAAuB,EAC/CjF,OAAOiH,IACPhH,QAAQiH,IACR7F,MAAAA,IACAjE,IAAAA,GACAK,OAAAA,IACAyH,aAAAA,GACAtH,YAAAA,GACAuC,QAAAA,GACAnC,SAAAA,IACAC,MAAAA,IACAC,SAAAA,GACAC,QAAAA,IACAC,KAAAA,GACAG,QAAAA,GACAE,SAAAA,GACAJ,eAAAA,IACAC,sBAAAA,GAAAA,CAAAA,GAjBIsG,KAAK0H,GAAL1H,OAAU2H,KAAKC,EAAAF,IAAAG,EAAAA,GAoBjB/G,KAAS6G,GAAM7G,QACfC,KAAS4G,GAAM5G,QAEf+G,MAAW5G,GAAqB,EAClC3G,eAAAA,KACA4G,SAAAA,KACAC,cAAAA,KACAC,cAAAA,KACAC,aAAAA,KACA5G,SAAAA,IAAAA,CAAAA,GAGEqN,KAAiD,EACnDC,MAAM,MACNlL,MAAM,MACNmL,SAAS,MACTpN,aAAa,MACbqN,MAAM,KAAA;AAGNlO,IAAOmO,SAAS,MAAA,MAChBJ,GAAUC,WACNrP,mBAAAA,KAACyP,GAAI,EAEDhN,OAAOiH,IACPhH,QAAQiH,IACRxB,QAAQ7G,KAAe6G,KAAsB,MAC7CuH,SAASvB,KACT/F,QAAQ7G,MAAe6G,KAAsB,MAC7CuH,SAAStB,IAAAA,GANL,MAAA,IAWZhN,EAAOmO,SAAS,MAAA,MAChBJ,GAAUjL,WACNnE,mBAAAA,KAAC4P,GAAI,EAEDzH,QAAQA,IACRC,QAAQA,IACR3F,OAAOiH,IACPhH,QAAQiH,IACRkG,KAAKrO,QAAAA,MAAAA,MAAAA,QACLsO,OAAOrO,QAAAA,MAAAA,MAAAA,QACPsO,QAAQrO,QAAAA,MAAAA,MAAAA,QACRsO,MAAMrO,QAAAA,MAAAA,MAAAA,OAAYsO,GARd,MAAA,IAaZ5O,EAAOmO,SAAS,SAAA,MAChBJ,GAAUE,cACNtP,mBAAAA,KAAC+J,IAAO,EAEJ1C,OAAOA,IACPlG,aAAaA,IACbC,aAAaA,IACbQ,eAAeA,KACfG,SAASA,KACTiI,WAAW+D,GACXtF,cAAcA,KACdE,aAAaA,KACbD,cAAcA,KACdF,SAASA,IAAAA,GAVL,SAAA,IAeZnH,EAAOmO,SAAS,aAAA,MAChBJ,GAAUlN,kBACNlC,mBAAAA,KAACyM,IAAoB,EAEjBpF,OAAOA,IACPnF,aAAaA,IAAAA,GAFT,aAAA,IAOZN,OAAiBC,MACjBuN,GAAUG,WACNvP,mBAAAA,KAACkQ,GAAI,EAED7I,OAAOA,IACP5E,OAAOiH,IACPhH,QAAQiH,IACRlB,cAAc0G,IAAS1G,cACvBE,aAAawG,IAASxG,aACtBD,cAAcyG,IAASzG,cACvBF,SAAS2G,IAAS3G,SAClB2H,OAAOrO,GAAAA,GARH,MAAA;AAahB,MAAMsO,KAAe5G,GAAyB,EAC1CnC,OAAAA,IACAc,QAAAA,IACAC,QAAAA,IACAsB,YAAAA,IACAC,aAAAA,IACAC,YAAAA,IACAC,aAAAA,IACAC,QAAAA,GAAAA,CAAAA;AAGJ,aACI9J,mBAAAA,KAACqQ,IAAU,EAAC5N,OAAOmH,IAAYlH,QAAQmH,IAAaC,QAAQA,IAAQ3H,MAAMA,IAAKwJ,UAC1EtK,EAAO+B,IAAI,SAACkN,IAAOhN,IAAAA;AAChB,WAAA,WAAI8L,GAAUkB,EAAAA,IACHlB,GAAUkB,EAAAA,IAGA,cAAA,OAAVA,SACAtQ,mBAAAA,KAACuQ,aAAAA,UAAQ,EAAA5E,cAAUzB,aAAAA,eAAcoG,IAAOF,EAAAA,EAAAA,GAAzB9M,EAAAA,IAGnB;EAAA,CAAA,EAAA,CAAA;AAIvB;IAEakN,KAAY,SAAH9M,IAAAA;AAAA,MAClB+G,KAAK/G,GAAL+G,OAAKgG,KAAA/M,GACL9B,eAAAA,KAAAA,WAAa6O,KAAGrQ,GAAawB,gBAAa6O,IAAAC,KAAAhN,GAC1C1B,SAAAA,KAAAA,WAAO0O,KAAGtQ,GAAa4B,UAAO0O,IAAAC,KAAAjN,GAC9BzB,cAAAA,KAAAA,WAAY0O,KAAGvQ,GAAa6B,eAAY0O,IACxCC,IAAalN,GAAbkN,eACGC,IAAU5B,EAAAvL,IAAAoN,EAAAA;AAAA,aAGb9Q,mBAAAA,KAAC+Q,IAAS,EAAOnP,eAAAA,IAAeI,SAAAA,IAASC,cAAAA,IAAcwI,OAAAA,IAAOmG,eAAAA,GAAajF,cACvE3L,mBAAAA,KAAC6M,IAAc9F,EAAA,EAAWnF,eAAeA,GAAAA,GAAmBiP,CAAAA,CAAAA,EAAAA,CAAAA;AACpD;ICrNHG,KAAsB,SAAYhC,IAAAA;AAAyC,aACpFhP,mBAAAA,KAACiR,IAAiB,EAAAtF,UACb,SAAA/L,IAAAA;AAAA,QAAG6C,KAAK7C,GAAL6C,OAAOC,KAAM9C,GAAN8C;AAAM,eACb1C,mBAAAA,KAACwQ,IAASzJ,EAAA,EAAWtE,OAAOA,IAAOC,QAAQA,GAAAA,GAAYsM,EAAAA,CAAAA;EAAS,EAAA,CAAA;AAEpD;IAAA,KAAA,CAAA,OAAA;IAAA,KAAA,CAAA,SAAA,iBAAA,WAAA,gBAAA,eAAA;ICDXkC,KAAsB,SAC/BC,IAA6BvR,IAAAA;AAU5B,MARGyI,KAAIzI,GAAJyI,MACAsC,KAAc/K,GAAd+K,gBACAC,KAAchL,GAAdgL,gBAOEwG,KAAkBzG,GAAetC,EAAAA;AACnC+I,EAAAA,KAAkB,MAClBD,GAAIE,cAAczG,GAAevC,EAAAA,GACjC8I,GAAIG,YAAYF,KAGpBD,GAAII,UAAAA,GACJJ,GAAIK,IAAInJ,GAAKpE,GAAGoE,GAAKnE,GAAGmE,GAAK3H,OAAO,GAAG,GAAG,IAAI4D,KAAKmN,EAAAA,GACnDN,GAAIO,YAAYrJ,GAAKtI,OACrBoR,GAAI7E,KAAAA,GAEA8E,KAAkB,KAClBD,GAAI5E,OAAAA;AAEZ;IAUaoF,KAAuB,SAAHjO,IAAAA;AAqCU,MApCvCI,KAAIJ,GAAJI,MACArB,KAAKiB,GAALjB,OACAC,IAAMgB,GAANhB,QACQoK,IAAapJ,GAArBoG,QAAM8H,KAAAlO,GACN7D,IAAAA,IAAAA,WAAE+R,KAAGxR,GAAaP,KAAE+R,IAAAC,IAAAnO,GACpBxD,OAAAA,IAAAA,WAAK2R,IAAGzR,GAAaF,QAAK2R,GAC1BlK,KAAWjE,GAAXiE,aAAWmK,KAAApO,GACXrD,YAAAA,IAAAA,WAAUyR,KAAG1R,GAAaC,aAAUyR,IACpClP,KAAMc,GAANd,QAAMmP,KAAArO,GACNjD,SAAAA,IAAAA,WAAOsR,KAAG3R,GAAaK,UAAOsR,IAAAC,IAAAtO,GAC9BhD,MAAAA,IAAAA,WAAIsR,IAAG5R,GAAaM,OAAIsR,GAAAC,KAAAvO,GACxB5C,eAAAA,KAAAA,WAAamR,KAAG7R,GAAaU,gBAAamR,IAAAC,KAAAxO,GAC1C3C,sBAAAA,KAAAA,WAAoBmR,KAAG9R,GAAaW,uBAAoBmR,IAAAC,IAAAzO,GACxD1C,QAAAA,IAAAA,WAAMmR,IAAG/R,GAAaY,SAAMmR,GAAAC,IAAA1O,GAC5BxC,SAAAA,IAAAA,WAAOkR,IAAGhS,GAAac,UAAOkR,GAAAC,IAAA3O,GAC9BtC,aAAAA,IAAAA,WAAWiR,IAAGjS,GAAagB,cAAWiR,GAAAC,IAAA5O,GACtC9C,QAAAA,IAAAA,WAAM0R,IAAGlS,GAAaQ,SAAM0R,GAAAC,IAAA7O,GAC5B/C,SAAAA,IAAAA,WAAO4R,IAAGnS,GAAaO,UAAO4R,GAAAC,KAAA9O,GAC9B7C,KAAAA,KAAAA,WAAG2R,KAAGpS,GAAaS,MAAG2R,IAAAC,KAAA/O,GACtBrC,QAAAA,KAAAA,WAAMoR,KAAGrS,GAAaiB,SAAMoR,IAAAC,MAAAhP,GAC5BiP,cAAAA,MAAAA,WAAYD,MAAGxB,KAAmBwB,KAAAE,MAAAlP,GAClC5B,WAAAA,MAAAA,WAAS8Q,MAAGxS,GAAa0B,YAAS8Q,KAClCtR,MAAWoC,GAAXpC,aACA6M,MAAWzK,GAAXyK,aACA5M,MAAWmC,GAAXnC,aACA8M,MAAW3K,GAAX2K,aAAWwE,MAAAnP,GACXlC,SAAAA,MAAAA,WAAOqR,MAAGzS,GAAaoB,UAAOqR,KAAAC,MAAApP,GAC9BjC,WAAAA,MAAAA,WAASqR,MAAG1S,GAAaqB,YAASqR,KAAAC,MAAArP,GAClChC,YAAAA,MAAAA,WAAUqR,MAAG3S,GAAasB,aAAUqR,KAAAC,MAAAtP,GACpC/B,UAAAA,MAAAA,WAAQqR,MAAG5S,GAAauB,WAAQqR,KAChCpR,MAAa8B,GAAb9B,eACA+G,MAAWjF,GAAXiF,aACAH,MAAO9E,GAAP8E,SAAOyK,MAAAvP,GACP3B,SAAAA,MAAAA,WAAOkR,MAAG7S,GAAa2B,UAAOkR,KAAAC,MAAAxP,GAC9BvB,MAAAA,MAAAA,WAAI+Q,MAAG9S,GAAa+B,OAAI+Q,KAAAC,MAAAzP,GACxBtB,YAAAA,MAAAA,WAAU+Q,MAAG/S,GAAagC,aAAU+Q,KAE9BC,UAAWC,aAAAA,QAAiC,IAAA,GAC5C5I,KAAQC,GAAAA,GACd4I,SAAsCC,aAAAA,UAAyC,IAAA,GAAxEC,KAAWF,GAAA,CAAA,GAAEG,KAAcH,GAAA,CAAA,GAElCzE,KAAqEC,GACjErM,IACAC,GACAoK,CAAAA,GAHIlD,KAAUiF,GAAVjF,YAAYC,KAAWgF,GAAXhF,aAAaC,KAAM+E,GAAN/E,QAAQJ,KAAUmF,GAAVnF,YAAYC,KAAWkF,GAAXlF,aAMrDoF,KAA6BrH,GAAuB,EAChDjF,OAAOiH,IACPhH,QAAQiH,IACR7F,MAAAA,IACAjE,IAAAA,GACAK,OAAAA,GACAyH,aAAAA,IACAtH,YAAAA,GACAuC,QAAAA,IACAnC,SAAAA,GACAC,MAAAA,GACAC,SAAAA,GACAC,QAAAA,GACAC,KAAAA,IACAG,QAAAA,GACAE,SAAAA,GACAJ,eAAAA,IACAC,sBAAAA,GAAAA,CAAAA,GAjBIsG,KAAK0H,GAAL1H,OAoBRjC,MApBwB6J,EAAAF,IAAAG,EAAAA,GAoBhB/G,KAAM/C,IAAN+C,QAAQC,KAAMhD,IAANgD,QAEhBsL,KAA8BC,EAAwC,EAClEC,QAAQvM,IACR5E,OAAOiH,IACPhH,QAAQiH,IACRwG,OAAOrO,IAAAA,CAAAA,GAJH+R,KAAQH,GAARG,UAAUC,KAAOJ,GAAPI,SAOZlJ,KAAiBC,GAAkBzJ,GAAaqJ,EAAAA,GAChDE,KAAiB,WAAA;AAAH,WAAS;EAAC;AAE9BoJ,mBAAAA,WAAU,WAAA;AACN,QAAKX,IAASY,SAAd;AAEAZ,MAAAA,IAASY,QAAQvR,QAAQmH,KAAaxH,KACtCgR,IAASY,QAAQtR,SAASmH,KAAczH;AAExC,UAAM+O,KAAMiC,IAASY,QAAQC,WAAW,IAAA;AAEnC9C,MAAAA,OAELA,GAAIvN,MAAMxB,KAAYA,GAAAA,GAEtB+O,GAAIO,YAAYjH,GAAMyJ,YACtB/C,GAAIgD,SAAS,GAAG,GAAGvK,IAAYC,EAAAA,GAE/BsH,GAAIiD,KAAAA,GACJjD,GAAIkD,UAAUvK,GAAOkG,MAAMlG,GAAO+F,GAAAA,GAElCxO,GAAOiT,QAAQ,SAAAhE,IAAAA;AAEG,mBAAVA,UACA5L,gBAAAA,SAAS+F,GAAM4E,KAAKkF,KAAK/H,WAAAA,KACzB/B,GAAM4E,KAAKkF,KAAK/H,cAAc,MAE9B2E,GAAIG,YAAY7G,GAAM4E,KAAKkF,KAAK/H,aAChC2E,GAAIE,cAAc5G,GAAM4E,KAAKkF,KAAKhI,QAElCjL,OACIkT,EAAwBrD,IAAK,EACzB1O,OAAOiH,IACPhH,QAAQiH,IACR/F,OAAOuE,IACPxF,MAAM,KACNkB,QAAQsK,IAAAA,CAAAA,GAGhB5M,OACIiT,EAAwBrD,IAAK,EACzB1O,OAAOiH,IACPhH,QAAQiH,IACR/F,OAAOwE,IACPzF,MAAM,KACNkB,QAAQwK,IAAAA,CAAAA,IAIN,WAAViC,MACAmE,EAAmBtD,IAAK,EACpBhJ,QAAAA,IACAC,QAAAA,IACA3F,OAAOiH,IACPhH,QAAQiH,IACRkG,KAAKrO,KACLsO,OAAOrO,KACPsO,QAAQrO,KACRsO,MAAMrO,KACN8I,OAAAA,GAAAA,CAAAA,GAIM,cAAV6F,MACAjJ,GAAMiN,QAAQ,SAAAjM,IAAAA;AACVsK,UAAAA,IAAaxB,IAAK,EACd9I,MAAAA,IACAsC,gBAAAA,IACAC,gBAAAA,GAAAA,CAAAA;QAER,CAAA,GAGU,WAAV0F,MAAoBxO,OAAagS,OACjCY,GAAsBvD,IAAK2C,EAAAA,GACvBN,MACAmB,EAA0BxD,IAAK2C,IAASN,GAAYoB,KAAAA;MAGhE,CAAA;IA3EuB;EA4E1B,GAAE,CACCxB,KACAxJ,IACAC,IACAH,IACAC,IACAvH,KACA0H,IACAW,IACApJ,IACA8G,IACAC,IACA9G,KACA6M,KACA5M,KACA8M,KACA7M,KACAC,KACAC,KACAC,KACAmS,IACAhS,KACA0R,IACAnM,IACAsL,KACAhI,IACAC,EAAAA,CAAAA;AAGJ,MAAMiK,SAAwB7L,aAAAA,aAC1B,SAACC,IAAAA;AACG,QAAA,CAAKmK,IAASY,QACV,QAAO;AAGX,QAAAc,KAAeC,GAAkB3B,IAASY,SAAS/K,EAAAA,GAA5ChF,KAAC6Q,GAAA,CAAA,GAAE5Q,KAAC4Q,GAAA,CAAA;AACX,QAAA,CAAKE,GAAelL,GAAOkG,MAAMlG,GAAO+F,KAAKnG,IAAYC,IAAa1F,IAAGC,EAAAA,EACrE,QAAO;AAGX,QAAM+Q,KAAYpB,GAASqB,KAAKjR,KAAI6F,GAAOkG,MAAM9L,KAAI4F,GAAO+F,GAAAA;AAC5D,WAAOxI,GAAM4N,EAAAA;EACjB,GACA,CAAC7B,KAAUtJ,IAAQJ,IAAYC,IAAakK,IAAUxM,EAAAA,CAAAA,GAG1DuB,KAA8CC,EAAAA,GAAtCC,KAAoBF,GAApBE,sBAAsBC,KAAWH,GAAXG,aACxBoM,SAAkBnM,aAAAA,aACpB,SAACX,IAA+BY,IAAAA;AAC5BH,WAAqBoB,aAAAA,eAAcnI,KAASsG,EAAAA,GAAOY,EAAAA;EACvD,GACA,CAACH,IAAsB/G,GAAAA,CAAAA,GAGrBqT,SAAmBpM,aAAAA,aACrB,SAACC,IAAAA;AACG,QAAMZ,KAAOwM,GAAsB5L,EAAAA;AACnCwK,OAAepL,EAAAA,GAEXA,MAAAA,QACAM,OAAAA,IAAcN,IAAMY,EAAAA,GACpBkM,GAAgB9M,IAAMY,EAAAA,KAEtBF,GAAAA;EAER,GACA,CAAC8L,IAAuBpB,IAAgB9K,KAAawM,IAAiBpM,EAAAA,CAAAA,GAGpEqB,SAAmBpB,aAAAA,aAAY,WAAA;AACjCD,OAAAA,GACA0K,GAAe,IAAA;EACnB,GAAG,CAAC1K,IAAa0K,EAAAA,CAAAA,GAEXpJ,UAAcrB,aAAAA,aAChB,SAACC,IAAAA;AACG,QAAMZ,KAAOwM,GAAsB5L,EAAAA;AAC/BZ,IAAAA,OAAAA,QACAG,OAAAA,IAAUH,IAAMY,EAAAA;EAExB,GACA,CAAC4L,IAAuBrM,GAAAA,CAAAA;AAG5B,aACIxI,mBAAAA,KAAA,UAAA,EACIqV,KAAKjC,KACL3Q,OAAOmH,KAAaxH,KACpBM,QAAQmH,KAAczH,KACtByJ,OAAO,EACHpJ,OAAOmH,IACPlH,QAAQmH,IACRyL,QAAQ1T,MAAgB,SAAS,SAAA,GAErCO,MAAMA,KACNsG,cAAc7G,MAAgBwT,KAAAA,QAC9BzM,aAAa/G,MAAgBwT,KAAAA,QAC7B1M,cAAc9G,MAAgBwI,KAAAA,QAC9B5B,SAAS5G,MAAgByI,MAAAA,OAAc4F,CAAAA;AAGnD;IAEasF,KAAkB,SAAHvP,IAAAA;AAAA,MACxByE,KAAKzE,GAALyE,OAAK+K,KAAAxP,GACLpE,eAAAA,KAAAA,WAAa4T,KAAGpV,GAAawB,gBAAa4T,IAAAC,KAAAzP,GAC1ChE,SAAAA,KAAAA,WAAOyT,KAAGrV,GAAa4B,UAAOyT,IAAAC,KAAA1P,GAC9B/D,cAAAA,KAAAA,WAAYyT,KAAGtV,GAAa6B,eAAYyT,IACxC9E,IAAa5K,GAAb4K,eACGC,IAAU5B,EAAAjJ,IAAA8K,EAAAA;AAAA,aAGb9Q,mBAAAA,KAAC+Q,IAAS,EAAOnP,eAAAA,IAAeI,SAAAA,IAASC,cAAAA,IAAcwI,OAAAA,IAAOmG,eAAAA,GAAajF,cACvE3L,mBAAAA,KAAC2R,IAAoB5K,EAAA,EAAWnF,eAAeA,GAAAA,GAAmBiP,CAAAA,CAAAA,EAAAA,CAAAA;AAC1D;ICvTH8E,KAA4B,SACrC3G,IAAAA;AAA+C,aAE/ChP,mBAAAA,KAACiR,IAAiB,EAAAtF,UACb,SAAA/L,IAAAA;AAAA,QAAG6C,KAAK7C,GAAL6C,OAAOC,KAAM9C,GAAN8C;AAAM,eACb1C,mBAAAA,KAACuV,IAAexO,EAAA,EAAWtE,OAAOA,IAAOC,QAAQA,GAAAA,GAAYsM,EAAAA,CAAAA;EAAS,EAAA,CAAA;AAE1D;",
  "names": ["x", "y", "i", "j", "n", "x", "y", "z", "i", "_", "x", "y", "x2", "y2", "x3", "y3", "i", "x", "y", "i", "j", "n", "_", "_", "x", "y", "i", "x", "i", "n", "k", "r", "x", "y", "l", "_", "i", "n", "_", "t", "c", "t", "e", "now", "i", "n", "k", "_", "x", "y", "x_default", "x", "i", "n", "_", "y_default", "y", "i", "n", "_", "SwarmPlotTooltip", "_ref", "id", "formattedValue", "color", "_jsx", "BasicTooltip", "value", "enableChip", "defaultProps", "valueScale", "type", "min", "max", "groupBy", "size", "spacing", "layout", "gap", "forceStrength", "simulationIterations", "colors", "scheme", "colorBy", "borderWidth", "borderColor", "layers", "enableGridX", "enableGridY", "axisTop", "axisRight", "axisBottom", "axisLeft", "isInteractive", "useMesh", "debugMesh", "tooltip", "animate", "motionConfig", "annotations", "role", "pixelRatio", "window", "_window$devicePixelRa", "devicePixelRatio", "computeOrdinalScale", "width", "height", "axis", "groups", "Array", "isArray", "length", "Error", "groupSize", "groupCount", "range", "map", "_", "i", "scaleOrdinal", "domain", "computeValueScale", "_ref2", "getValue", "scale", "values", "data", "series", "_data", "x", "y", "axes", "generateSeriesAxis", "computeScale", "Math", "apply", "all", "getSizeGenerator", "isNumber", "isPlainObject", "isString", "key", "sizes", "sizeScale", "scaleLinear", "d", "get", "computeForces", "_ref3", "xForce", "yForce", "ordinalScale", "collisionForce", "forceCollide", "forceX", "strength", "forceY", "group", "collision", "computeNodes", "_ref4", "_ref5", "scaleSpec", "getId", "getGroup", "getSize", "forces", "valueScaleConfig", "config", "horizontal", "vertical", "parseValue", "format", "createDateNormalizer", "simulatedNodes", "_extends", "simulation", "forceSimulation", "force", "stop", "tick", "nodes", "useValueScale", "useMemo", "useOrdinalScale", "useForces", "useSwarmPlot", "valueFormat", "usePropertyAccessor", "formatValue", "useValueFormatter", "getColorId", "getColor", "useOrdinalColorScale", "_useMemo", "xScale", "yScale", "node", "useBorderWidth", "useNodeMouseHandlers", "onClick", "onMouseEnter", "onMouseLeave", "onMouseMove", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "useCallback", "event", "getNodeAnnotationPosition", "getNodeAnnotationDimensions", "useSwarmPlotAnnotations", "useAnnotations", "getPosition", "getDimensions", "useSwarmPlotLayerContext", "_ref6", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "margin", "Circles", "component", "handleMouseEnter", "createElement", "handleMouseMove", "handleMouseLeave", "handleClick", "_useMotionConfig", "useMotionConfig", "springConfig", "theme", "useTheme", "getBorderWidth", "getBorderColor", "useInheritedColor", "transitionPhases", "enter", "radius", "opacity", "update", "leave", "transition", "useTransition", "keys", "initial", "from", "immediate", "_Fragment", "children", "transitionProps", "style", "radiusValue", "to", "CircleSvg", "animated", "circle", "cx", "cy", "r", "fill", "stroke", "strokeWidth", "SwarmPlotAnnotations", "boundAnnotations", "annotation", "Annotation", "InnerSwarmPlot", "partialMargin", "_ref$id", "_ref$value", "_ref$valueScale", "_ref$groupBy", "_ref$size", "_ref$forceStrength", "_ref$simulationIterat", "_ref$colors", "_ref$colorBy", "_ref$borderColor", "_ref$borderWidth", "_ref$layout", "_ref$spacing", "_ref$gap", "_ref$layers", "_ref$circleComponent", "circleComponent", "_ref$useMesh", "_ref$debugMesh", "_ref$enableGridX", "gridXValues", "_ref$enableGridY", "gridYValues", "_ref$axisTop", "_ref$axisRight", "_ref$axisBottom", "_ref$axisLeft", "_ref$tooltip", "_ref$annotations", "_ref$role", "_useDimensions", "useDimensions", "_useSwarmPlot", "props", "_objectWithoutPropertiesLoose", "_excluded", "handlers", "layerById", "grid", "circles", "mesh", "includes", "Grid", "xValues", "yValues", "Axes", "top", "right", "bottom", "left", "undefined", "Mesh", "debug", "layerContext", "SvgWrapper", "layer", "Fragment", "SwarmPlot", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "_excluded2", "Container", "ResponsiveSwarmPlot", "ResponsiveWrapper", "renderCircleDefault", "ctx", "nodeBorderWidth", "strokeStyle", "lineWidth", "beginPath", "arc", "PI", "fillStyle", "InnerSwarmPlotCanvas", "_ref2$id", "_ref2$value", "_ref2$valueScale", "_ref2$groupBy", "_ref2$size", "_ref2$forceStrength", "_ref2$simulationItera", "_ref2$colors", "_ref2$colorBy", "_ref2$borderColor", "_ref2$layout", "_ref2$spacing", "_ref2$gap", "_ref2$layers", "_ref2$renderCircle", "renderCircle", "_ref2$debugMesh", "_ref2$axisTop", "_ref2$axisRight", "_ref2$axisBottom", "_ref2$axisLeft", "_ref2$tooltip", "_ref2$role", "_ref2$pixelRatio", "canvasEl", "useRef", "_useState", "useState", "currentNode", "setCurrentNode", "_useVoronoiMesh", "useVoronoiMesh", "points", "delaunay", "voronoi", "useEffect", "current", "getContext", "background", "fillRect", "save", "translate", "forEach", "line", "renderGridLinesToCanvas", "renderAxesToCanvas", "renderVoronoiToCanvas", "renderVoronoiCellToCanvas", "index", "getNodeFromMouseEvent", "_getRelativeCursor", "getRelativeCursor", "isCursorInRect", "nodeIndex", "find", "showNodeTooltip", "handleMouseHover", "ref", "cursor", "SwarmPlotCanvas", "_ref4$isInteractive", "_ref4$animate", "_ref4$motionConfig", "ResponsiveSwarmPlotCanvas"]
}
