{
  "version": 3,
  "sources": ["../../@nivo/bump/src/bump/compute.ts", "../../@nivo/bump/src/bump/hooks.ts", "../../@nivo/bump/src/bump/Point.tsx", "../../@nivo/bump/src/bump/defaults.ts", "../../@nivo/bump/src/bump/LineTooltip.tsx", "../../@nivo/bump/src/bump/PointTooltip.tsx", "../../@nivo/bump/src/bump/Line.tsx", "../../@nivo/bump/src/bump/LinesLabels.tsx", "../../@nivo/bump/src/bump/Mesh.tsx", "../../@nivo/bump/src/bump/Bump.tsx", "../../@nivo/bump/src/bump/ResponsiveBump.tsx", "../../@nivo/bump/src/bump/types.ts", "../../@nivo/bump/src/area-bump/hooks.ts", "../../@nivo/bump/src/area-bump/compute.ts", "../../@nivo/bump/src/area-bump/Area.tsx", "../../@nivo/bump/src/area-bump/AreasLabels.tsx", "../../@nivo/bump/src/area-bump/defaults.ts", "../../@nivo/bump/src/area-bump/AreaTooltip.tsx", "../../@nivo/bump/src/area-bump/AreaBump.tsx", "../../@nivo/bump/src/area-bump/ResponsiveAreaBump.tsx"],
  "sourcesContent": ["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n", "import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n    BumpPointMouseHandler,\n    BumpSerieMouseHandler,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activePointIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activePointIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activePointIds.length === 0) return getNormalStyle(point)\n            if (activePointIds.includes(point.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activePointIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n    const [activePointIds, setActivePointIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activePointIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-expect-error\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, activeSerieIds, getPointColor, getPointBorderColor, getPointStyle])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n        activePointIds,\n        setActivePointIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    lineTooltip: tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    setActiveSerieIds: (serieIds: string[]) => void\n    lineTooltip: BumpCommonProps<Datum, ExtraProps>['lineTooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpPointHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    point,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActivePointIds,\n    setActiveSerieIds,\n    pointTooltip: tooltip,\n}: {\n    point: BumpPoint<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    setActivePointIds: (pointIds: string[]) => void\n    setActiveSerieIds: (pointIds: string[]) => void\n    pointTooltip: BumpCommonProps<Datum, ExtraProps>['pointTooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { point }), event)\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [showTooltipFromEvent, tooltip, point, setActivePointIds, setActiveSerieIds, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { point }), event)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [showTooltipFromEvent, tooltip, point, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActivePointIds([])\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setActivePointIds, setActiveSerieIds, onMouseLeave, point]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(point, event)\n        },\n        [point, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point?.[0] === null || point?.[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie) as string,\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n", "import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = {\n    pointerEvents: 'none',\n}\n\nexport interface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n", "import { MotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\nimport PointTooltip from './PointTooltip'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onClick'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points', 'mesh'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    lineTooltip: LineTooltip,\n    pointTooltip: PointTooltip,\n    useMesh: false,\n    debugMesh: false,\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: MotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n", "import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\ninterface PointTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nconst LinePointTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointTooltipProps<Datum, ExtraProps>) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.x}</strong>, y: <strong>{point.data.y}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serie.color}\n        />\n    )\n}\n\nexport default memo(LinePointTooltip)\n", "import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport {\n    BumpCommonProps,\n    BumpComputedSerie,\n    BumpDatum,\n    BumpSerieExtraProps,\n    BumpSerieMouseHandler,\n} from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    setActiveSerieIds: (serieIds: string[]) => void\n    lineTooltip: BumpCommonProps<Datum, ExtraProps>['lineTooltip']\n    useMesh: BumpCommonProps<Datum, ExtraProps>['useMesh']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    lineTooltip,\n    useMesh,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        lineTooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && !useMesh && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n", "import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n", "import { MouseEvent } from 'react'\nimport { createElement, memo, useCallback } from 'react'\nimport { Margin } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport {\n    BumpCommonProps,\n    BumpDatum,\n    BumpPoint,\n    BumpPointMouseHandler,\n    BumpSerieExtraProps,\n} from './types'\n\ninterface MeshProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    width: number\n    height: number\n    margin: Margin\n    setActivePointIds: (ids: string[]) => void\n    setActiveSerieIds: (ids: string[]) => void\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    tooltip: BumpCommonProps<Datum, ExtraProps>['pointTooltip']\n    debug: boolean\n}\n\nconst InnerMesh = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    width,\n    height,\n    margin,\n    setActivePointIds,\n    setActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<Datum, ExtraProps>) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y ?? 0 + margin.top],\n                'top'\n            )\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [\n            showTooltipAt,\n            tooltip,\n            margin.left,\n            margin.top,\n            setActivePointIds,\n            setActiveSerieIds,\n            onMouseEnter,\n        ]\n    )\n\n    const handleMouseMove = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y ?? 0 + margin.top],\n                'top'\n            )\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseMove && onMouseMove(point, event)\n        },\n        [\n            showTooltipAt,\n            tooltip,\n            margin.left,\n            margin.top,\n            setActivePointIds,\n            setActiveSerieIds,\n            onMouseMove,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            hideTooltip()\n            setActivePointIds([])\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, onMouseLeave, setActivePointIds, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nexport const Mesh = memo(InnerMesh) as typeof InnerMesh\n", "import { createElement, useMemo, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpPointMouseHandler,\n    BumpSerieExtraProps,\n    BumpSerieMouseHandler,\n    BumpSvgProps,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Mesh } from './Mesh'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = bumpSvgDefaultProps.layers as NonNullable<BumpSvgProps<Datum, ExtraProps>['layers']>,\n\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n\n    colors = bumpSvgDefaultProps.colors as NonNullable<BumpSvgProps<Datum, ExtraProps>['colors']>,\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n\n    startLabel = bumpSvgDefaultProps.startLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = bumpSvgDefaultProps.endLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    pointComponent = bumpSvgDefaultProps.pointComponent as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointComponent']\n    >,\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointColor']\n    >,\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointBorderColor']\n    >,\n\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    useMesh = bumpSvgDefaultProps.useMesh,\n    debugMesh = bumpSvgDefaultProps.debugMesh,\n    lineTooltip = bumpSvgDefaultProps.lineTooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['lineTooltip']\n    >,\n    pointTooltip = bumpSvgDefaultProps.pointTooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointTooltip']\n    >,\n    role = bumpSvgDefaultProps.role,\n}: InnerBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        series,\n        points,\n        xScale,\n        yScale,\n        lineGenerator,\n        activePointIds,\n        activeSerieIds,\n        setActiveSerieIds,\n        setActivePointIds,\n    } = useBump<Datum, ExtraProps>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        interpolation,\n        xPadding,\n        xOuterPadding,\n        yOuterPadding,\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        colors,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointColor,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        pointBorderColor,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseMove={onMouseMove as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseLeave={onMouseLeave as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onClick={onClick as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        lineTooltip={lineTooltip}\n                        useMesh={useMesh}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (isInteractive && useMesh && layers.includes('mesh')) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                setActivePointIds={setActivePointIds}\n                setActiveSerieIds={setActiveSerieIds}\n                onMouseEnter={onMouseEnter as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseMove={onMouseMove as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseLeave={onMouseLeave as BumpPointMouseHandler<Datum, ExtraProps>}\n                onClick={onClick as BumpPointMouseHandler<Datum, ExtraProps>}\n                tooltip={pointTooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            activePointIds,\n            setActiveSerieIds,\n            setActivePointIds,\n        }),\n        [\n            activePointIds,\n            activeSerieIds,\n            setActivePointIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    animate = bumpSvgDefaultProps.animate,\n    motionConfig = bumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { BumpDatum, BumpResponsiveProps, BumpSerieExtraProps, DefaultBumpDatum } from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>(\n    props: BumpResponsiveProps<Datum, ExtraProps>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <Bump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { FunctionComponent, MouseEvent } from 'react'\nimport { Line as D3Line } from 'd3-shape'\nimport { Theme, Box, Dimensions, MotionProps } from '@nivo/core'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { AxisProps } from '@nivo/axes'\nimport { ScalePoint } from '@nivo/scales'\nimport { PointProps } from './Point'\n\nexport interface BumpDatum {\n    x: number | string\n    y: number | null\n}\n\nexport interface DefaultBumpDatum {\n    x: string\n    y: number\n}\n\nexport type BumpSerieExtraProps = Record<string, unknown>\n\nexport type BumpSerie<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = ExtraProps & {\n    id: string\n    data: Datum[]\n}\n\nexport interface BumpSeriePoint<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    id: string\n    serie: BumpSerie<Datum, ExtraProps>\n    data: Datum\n    x: number\n    y: number | null\n}\n\nexport interface BumpPoint<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    id: string\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    data: Datum\n    x: number\n    y: number | null\n    isActive: boolean\n    isInactive: boolean\n    size: number\n    color: string\n    borderWidth: number\n    borderColor: string\n}\nexport type BumpPointComponent<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<PointProps<Datum, ExtraProps>>\n\nexport interface BumpComputedSerie<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> {\n    id: string\n    data: BumpSerie<Datum, ExtraProps>\n    points: BumpSeriePoint<Datum, ExtraProps>[]\n    linePoints: [number, number | null][]\n    color: string\n    opacity: number\n    lineWidth: number\n}\n\nexport type BumpDataProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = {\n    data: BumpSerie<Datum, ExtraProps>[]\n}\n\nexport type BumpInterpolation = 'smooth' | 'linear'\n\nexport type BumpLabel<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | ((serie: BumpSerie<Datum, ExtraProps>) => string)\n    | boolean\nexport interface BumpLabelData<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    id: string\n    label: string\n    x: number\n    y: number\n    color: string\n    opacity: number\n    textAnchor: 'start' | 'end'\n}\n\nexport type BumpSerieMouseHandler<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = (serie: BumpComputedSerie<Datum, ExtraProps>, event: MouseEvent<SVGPathElement>) => void\nexport type BumpPointMouseHandler<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => void\n\nexport type BumpLayerId = 'grid' | 'axes' | 'labels' | 'lines' | 'points' | 'mesh'\nexport interface BumpCustomLayerProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> {\n    innerHeight: number\n    innerWidth: number\n    lineGenerator: D3Line<[number, number | null]>\n    points: BumpPoint<Datum, ExtraProps>[]\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    xScale: ScalePoint<Datum['x']>\n    yScale: ScalePoint<number>\n    activeSerieIds: string[]\n    activePointIds: string[]\n    setActiveSerieIds: (serieIds: string[]) => void\n    setActivePointIds: (pointIds: string[]) => void\n}\nexport type BumpCustomLayer<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<BumpCustomLayerProps<Datum, ExtraProps>>\nexport type BumpLayer<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | BumpLayerId\n    | BumpCustomLayer<Datum, ExtraProps>\n\nexport type BumpLineTooltip<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<{\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}>\n\nexport type BumpPointTooltip<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<{\n    point: BumpPoint<Datum, ExtraProps>\n}>\n\nexport interface BumpBaseCommonProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> {\n    margin: Box\n\n    interpolation: BumpInterpolation\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n\n    theme: Theme\n    colors: OrdinalColorScaleConfig<BumpSerie<Datum, ExtraProps>>\n    lineWidth: number\n    activeLineWidth: number\n    inactiveLineWidth: number\n    opacity: number\n    activeOpacity: number\n    inactiveOpacity: number\n\n    startLabel: BumpLabel<Datum, ExtraProps>\n    startLabelPadding: number\n    startLabelTextColor: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    endLabel: BumpLabel<Datum, ExtraProps>\n    endLabelPadding: number\n    endLabelTextColor: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n\n    pointSize: number\n    activePointSize: number\n    inactivePointSize: number\n    pointColor: InheritedColorConfig<Omit<BumpPoint<Datum, ExtraProps>, 'color' | 'borderColor'>>\n    pointBorderWidth: number\n    activePointBorderWidth: number\n    inactivePointBorderWidth: number\n    pointBorderColor: InheritedColorConfig<Omit<BumpPoint<Datum, ExtraProps>, 'borderColor'>>\n\n    enableGridX: boolean\n    enableGridY: boolean\n    axisBottom: AxisProps | null\n    axisLeft: AxisProps | null\n    axisRight: AxisProps | null\n    axisTop: AxisProps | null\n\n    isInteractive: boolean\n    defaultActiveSerieIds: string[]\n    lineTooltip: BumpLineTooltip<Datum, ExtraProps>\n    pointTooltip: BumpPointTooltip<Datum, ExtraProps>\n    role: string\n    layers: BumpLayer<Datum, ExtraProps>[]\n    renderWrapper: boolean\n    useMesh: boolean\n    debugMesh: boolean\n}\n\nexport const isBumpPoint = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>(\n    point: BumpComputedSerie<Datum, ExtraProps> | BumpPoint<Datum, ExtraProps>\n): point is BumpPoint<Datum, ExtraProps> => {\n    return 'serie' in point\n}\n\nexport const isComputedBumpSerie = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>(\n    serie: BumpComputedSerie<Datum, ExtraProps> | BumpPoint<Datum, ExtraProps>\n): serie is BumpComputedSerie<Datum, ExtraProps> => {\n    return 'points' in serie\n}\n\ninterface BumpMeshCommonProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>\n    extends BumpBaseCommonProps<Datum, ExtraProps> {\n    useMesh: true\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n}\n\ninterface BumpSerieCommonProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>\n    extends BumpBaseCommonProps<Datum, ExtraProps> {\n    useMesh: false\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n}\n\nexport type BumpCommonProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | BumpMeshCommonProps<Datum, ExtraProps>\n    | BumpSerieCommonProps<Datum, ExtraProps>\n\nexport type BumpResponsiveProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = BumpCommonProps<Datum, ExtraProps> &\n    BumpDataProps<Datum, ExtraProps> & {\n        pointComponent?: BumpPointComponent<Datum, ExtraProps>\n    } & MotionProps\n\nexport type BumpSvgProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = BumpResponsiveProps<Datum, ExtraProps> & Dimensions\n", "import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n", "import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n", "import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n", "import { MotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: MotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n", "import { Fragment, useMemo, ReactNode, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n}: InnerAreaBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    animate = areaBumpSvgDefaultProps.animate,\n    motionConfig = areaBumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: AreaBumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerAreaBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>(\n    props: Omit<AreaBumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["useSerieDerivedProp", "instruction", "useMemo", "useBump", "_ref3", "width", "height", "data", "interpolation", "xPadding", "xOuterPadding", "yOuterPadding", "lineWidth", "activeLineWidth", "inactiveLineWidth", "colors", "opacity", "activeOpacity", "inactiveOpacity", "pointSize", "activePointSize", "inactivePointSize", "pointColor", "pointBorderWidth", "activePointBorderWidth", "inactivePointBorderWidth", "pointBorderColor", "isInteractive", "defaultActiveSerieIds", "_useState", "useState", "activeSerieIds", "setActiveSerieIds", "_useState2", "activePointIds", "setActivePointIds", "_useMemo", "_ref", "xValuesSet", "Set", "yValuesSet", "forEach", "serie", "datum", "add", "x", "y", "xValues", "Array", "from", "xScale", "castPointScale", "scalePoint", "domain", "range", "padding", "yValues", "sort", "a", "b", "yScale", "linePointPadding", "step", "Math", "min", "series", "map", "rawSerie", "id", "points", "linePoints", "i", "point", "push", "length", "filter", "rawSeries", "lineGenerator", "d3Line", "curve", "curveBasis", "curveLinear", "defined", "d", "getColor", "useOrdinalColorScale", "getSerieStyle", "getLineWidth", "getActiveLineWidth", "getInactiveLineWidth", "getOpacity", "getActiveOpacity", "getInactiveOpacity", "getNormalStyle", "useCallback", "getActiveStyle", "getInactiveStyle", "includes", "_extends", "color", "theme", "useTheme", "getPointColor", "useInheritedColor", "getPointBorderColor", "getPointStyle", "_ref2", "getSize", "getActiveSize", "getInactiveSize", "getBorderWidth", "getActiveBorderWidth", "getInactiveBorderWidth", "size", "borderWidth", "pts", "rawPoint", "isActive", "isInactive", "borderColor", "useBumpSerieHandlers", "_ref4", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "tooltip", "lineTooltip", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleMouseEnter", "event", "createElement", "handleMouseMove", "handleMouseLeave", "handleClick", "undefined", "useBumpPointHandlers", "_ref5", "pointTooltip", "_useTooltip2", "useBumpSeriesLabels", "_ref6", "position", "getLabel", "textAnchor", "signedPadding", "labels", "label", "pointStyle", "pointerEvents", "bumpSvgDefaultProps", "layers", "scheme", "startLabel", "startLabelPadding", "startLabelTextColor", "endLabel", "endLabelPadding", "endLabelTextColor", "modifiers", "enableGridX", "enableGridY", "axisTop", "axisBottom", "axisLeft", "_jsx", "BasicTooltip", "enableChip", "memo", "_jsxs", "children", "useMesh", "debugMesh", "role", "pointComponent", "_useMotionConfig", "useMotionConfig", "animate", "springConfig", "config", "animatedProps", "useSpring", "radius", "immediate", "animated", "circle", "cx", "cy", "r", "to", "v", "max", "fill", "strokeWidth", "stroke", "style", "motionConfig", "Line", "yStep", "handlers", "linePath", "animatedPath", "useAnimatedPath", "_Fragment", "path", "strokeLinecap", "strokeOpacity", "LinesLabels", "springs", "useSprings", "index", "text", "dominantBaseline", "Mesh", "margin", "debug", "showTooltipAt", "_point$y", "left", "top", "_point$y2", "BaseMesh", "nodes", "InnerBump", "partialMargin", "_ref$layers", "_ref$interpolation", "_ref$xPadding", "_ref$xOuterPadding", "_ref$yOuterPadding", "_ref$colors", "_ref$lineWidth", "_ref$activeLineWidth", "_ref$inactiveLineWidt", "_ref$opacity", "_ref$activeOpacity", "_ref$inactiveOpacity", "_ref$startLabel", "_ref$startLabelPaddin", "_ref$startLabelTextCo", "_ref$endLabel", "_ref$endLabelPadding", "_ref$endLabelTextColo", "_ref$pointComponent", "_ref$pointSize", "_ref$activePointSize", "_ref$inactivePointSiz", "_ref$pointColor", "_ref$pointBorderWidth", "_ref$activePointBorde", "_ref$inactivePointBor", "_ref$pointBorderColor", "_ref$enableGridX", "_ref$enableGridY", "_ref$axisTop", "axisRight", "_ref$axisBottom", "_ref$axisLeft", "_ref$isInteractive", "_ref$defaultActiveSer", "_ref$useMesh", "_ref$debugMesh", "_ref$lineTooltip", "_ref$pointTooltip", "_ref$role", "_useDimensions", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "_useBump", "layerById", "grid", "axes", "lines", "mesh", "Grid", "Axes", "right", "bottom", "Fragment", "key", "customLayerProps", "SvgWrapper", "layer", "_layerById$layer", "Bump", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "_objectWithoutPropertiesLoose", "_excluded", "Container", "ResponsiveBump", "props", "ResponsiveWrapper", "isBumpPoint", "isComputedBumpSerie", "useAreaBumpSeries", "align", "spacing", "maxSum", "maxValues", "slices", "Map", "has", "set", "total", "values", "slice", "get", "serieId", "value", "beforeHeight", "keys", "heightScale", "castLinearScale", "scaleLinear", "sliceHeight", "offset", "all", "previousValues", "_i", "pos", "beforeValue", "reduce", "t", "sliceValue", "areaPointPadding", "computedSerie", "areaPoints", "y0", "y1", "useAreaBump", "fillOpacity", "activeFillOpacity", "inactiveFillOpacity", "activeBorderWidth", "inactiveBorderWidth", "borderOpacity", "activeBorderOpacity", "inactiveBorderOpacity", "_useAreaBumpSeries", "areaGenerator", "d3Area", "getFillOpacity", "getActiveFillOpacity", "getInactiveFillOpacity", "getBorderColor", "getBorderOpacity", "getActiveBorderOpacity", "getInactiveBorderOpacity", "serieWithColor", "useAreaBumpSerieHandlers", "useAreaBumpSeriesLabels", "Area", "blendMode", "mixBlendMode", "AreasLabels", "areaBumpSvgDefaultProps", "defs", "InnerAreaBump", "_ref$align", "_ref$spacing", "_ref$blendMode", "_ref$fillOpacity", "_ref$activeFillOpacit", "_ref$inactiveFillOpac", "_ref$defs", "_ref$fill", "_ref$borderWidth", "_ref$activeBorderWidt", "_ref$inactiveBorderWi", "_ref$borderColor", "_ref$borderOpacity", "_ref$activeBorderOpac", "_ref$inactiveBorderOp", "_ref$tooltip", "_useAreaBump", "boundDefs", "bindDefs", "targetKey", "areas", "AreaBump", "ResponsiveAreaBump"]
}
