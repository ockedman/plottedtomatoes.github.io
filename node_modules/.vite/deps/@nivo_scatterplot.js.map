{
  "version": 3,
  "sources": ["../../@nivo/scatterplot/src/compute.ts", "../../@nivo/scatterplot/src/hooks.ts", "../../@nivo/scatterplot/src/Node.tsx", "../../@nivo/scatterplot/src/props.tsx", "../../@nivo/scatterplot/src/Tooltip.tsx", "../../@nivo/scatterplot/src/ScatterPlotAnnotations.tsx", "../../@nivo/scatterplot/src/Nodes.tsx", "../../@nivo/scatterplot/src/Mesh.tsx", "../../@nivo/scatterplot/src/ScatterPlot.tsx", "../../@nivo/scatterplot/src/ResponsiveScatterPlot.tsx", "../../@nivo/scatterplot/src/ScatterPlotCanvas.tsx", "../../@nivo/scatterplot/src/ResponsiveScatterPlotCanvas.tsx"],
  "sourcesContent": ["import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n", "import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n", "import { useCallback, MouseEvent } from 'react'\nimport { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseEnter?.(node, event),\n        [node, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseMove?.(node, event),\n        [node, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseLeave?.(node, event),\n        [node, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onClick?.(node, event),\n        [node, onClick]\n    )\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n", "import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n", "import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onClick?.(node, event),\n        [onClick]\n    )\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n", "import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n", "import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    MouseEvent,\n} from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProps, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n    canvasRef,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProps<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProps<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProps<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProps<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: ScatterPlotCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerScatterPlotCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\n\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = forwardRef(function ResponsiveScatterPlotCanvas<\n    RawDatum extends ScatterPlotDatum\n>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <ScatterPlotCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        ScatterPlotCanvasProps<ScatterPlotDatum>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],
  "mappings": "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",
  "names": ["getNodeSizeGenerator", "size", "isNumber", "isPlainObject", "isString", "key", "Error", "Array", "isArray", "values", "length", "sizes", "sizeScale", "scaleLinear", "domain", "range", "datum", "get", "useScatterPlot", "_ref", "data", "xScaleSpec", "xFormat", "yScaleSpec", "yFormat", "width", "height", "nodeId", "nodeSize", "colors", "_useMemo", "useMemo", "computeXYScalesForSeries", "series", "xScale", "yScale", "formatX", "useValueFormatter", "formatY", "getNodeId", "usePropertyAccessor", "rawNodes", "points", "forEach", "serie", "d", "serieIndex", "point", "index", "serieId", "id", "x", "position", "xValue", "formattedX", "y", "yValue", "formattedY", "push", "_extends", "getNodeSize", "getColor", "useOrdinalColorScale", "nodes", "map", "rawNode", "color", "legendData", "label", "useScatterPlotAnnotations", "items", "annotations", "useAnnotations", "getPosition", "node", "getDimensions", "interpolateRadius", "commonDefaultProps", "type", "min", "max", "enableGridX", "enableGridY", "axisBottom", "axisLeft", "nodeComponent", "style", "blendMode", "isInteractive", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "handleMouseEnter", "useCallback", "event", "handleMouseMove", "handleMouseLeave", "handleClick", "_jsx", "animated", "circle", "cx", "cy", "r", "to", "fill", "mixBlendMode", "undefined", "scheme", "debugMesh", "tooltip", "BasicTooltip", "value", "enableChip", "markers", "legends", "svgDefaultProps", "layers", "role", "useMesh", "animate", "motionConfig", "canvasDefaultProps", "pixelRatio", "window", "devicePixelRatio", "renderNode", "ctx", "beginPath", "arc", "Math", "PI", "fillStyle", "ScatterPlotAnnotations", "boundAnnotations", "_Fragment", "children", "annotation", "i", "Annotation", "getNodeKey", "regularTransition", "leaveTransition", "Nodes", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "transition", "useTransition", "keys", "from", "enter", "update", "leave", "immediate", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "createElement", "Mesh", "debug", "BaseMesh", "InnerScatterPlot", "_ref$xScale", "_ref$yScale", "partialMargin", "margin", "_ref$layers", "_ref$colors", "_ref$blendMode", "_ref$nodeId", "_ref$nodeSize", "_ref$nodeComponent", "_ref$enableGridX", "_ref$enableGridY", "gridXValues", "gridYValues", "axisTop", "axisRight", "_ref$axisBottom", "_ref$axisLeft", "_ref$annotations", "_ref$isInteractive", "_ref$useMesh", "_ref$debugMesh", "_ref$tooltip", "_ref$markers", "_ref$legends", "_ref$role", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "_useDimensions", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "_useScatterPlot", "customLayerProps", "layerById", "grid", "axes", "mesh", "includes", "Grid", "xValues", "yValues", "Axes", "top", "right", "bottom", "left", "CartesianMarkers", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "SvgWrapper", "layer", "Fragment", "ScatterPlot", "_ref2", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "theme", "renderWrapper", "otherProps", "_objectWithoutPropertiesLoose", "_excluded", "Container", "ResponsiveScatterPlot", "props", "ResponsiveWrapper", "InnerScatterPlotCanvas", "_ref$pixelRatio", "_ref$renderNode", "canvasRef", "canvasEl", "useRef", "useTheme", "_useState", "useState", "currentNode", "setCurrentNode", "_useVoronoiMesh", "useVoronoiMesh", "delaunay", "voronoi", "useEffect", "current", "getContext", "scale", "background", "fillRect", "translate", "lineWidth", "line", "strokeWidth", "strokeStyle", "stroke", "renderGridLinesToCanvas", "axis", "renderAnnotationsToCanvas", "renderAxesToCanvas", "renderVoronoiToCanvas", "renderVoronoiCellToCanvas", "renderLegendToCanvas", "getNodeFromMouseEvent", "_getRelativeCursor", "getRelativeCursor", "isCursorInRect", "nodeIndex", "find", "handleMouseHover", "ref", "canvas", "cursor", "ScatterPlotCanvas", "forwardRef", "ResponsiveScatterPlotCanvas"]
}
