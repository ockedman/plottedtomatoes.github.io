{
  "version": 3,
  "sources": ["../../@nivo/heatmap/src/HeatMapTooltip.tsx", "../../@nivo/heatmap/src/defaults.ts", "../../@nivo/heatmap/src/compute.ts", "../../@nivo/heatmap/src/hooks.ts", "../../@nivo/heatmap/src/HeatMapCellRect.tsx", "../../@nivo/heatmap/src/HeatMapCellCircle.tsx", "../../@nivo/heatmap/src/HeatMapCells.tsx", "../../@nivo/heatmap/src/HeatMapCellAnnotations.tsx", "../../@nivo/heatmap/src/HeatMap.tsx", "../../@nivo/heatmap/src/ResponsiveHeatMap.tsx", "../../@nivo/heatmap/src/canvas.tsx", "../../@nivo/heatmap/src/HeatMapCanvas.tsx", "../../@nivo/heatmap/src/ResponsiveHeatMapCanvas.tsx"],
  "sourcesContent": ["import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { HeatMapDatum, TooltipProps } from './types'\n\nconst NonMemoizedHeatMapTooltip = <Datum extends HeatMapDatum>({ cell }: TooltipProps<Datum>) => {\n    if (cell.formattedValue === null) return null\n\n    return (\n        <BasicTooltip\n            id={`${cell.serieId} - ${cell.data.x}`}\n            value={cell.formattedValue}\n            enableChip={true}\n            color={cell.color}\n        />\n    )\n}\n\nexport const HeatMapTooltip = memo(NonMemoizedHeatMapTooltip) as typeof NonMemoizedHeatMapTooltip\n", "import { DefaultHeatMapDatum, HeatMapCommonProps, LayerId } from './types'\nimport { HeatMapTooltip } from './HeatMapTooltip'\n\nexport const commonDefaultProps: Omit<\n    HeatMapCommonProps<DefaultHeatMapDatum>,\n    | 'margin'\n    | 'theme'\n    | 'valueFormat'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'role'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['grid', 'axes', 'cells', 'legends', 'annotations'],\n\n    forceSquare: false,\n    xInnerPadding: 0,\n    xOuterPadding: 0,\n    yInnerPadding: 0,\n    yOuterPadding: 0,\n    sizeVariation: false,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.15,\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.8]] },\n\n    enableGridX: false,\n    enableGridY: false,\n\n    enableLabels: true,\n    label: 'formattedValue',\n    labelTextColor: { from: 'color', modifiers: [['darker', 2]] },\n\n    colors: {\n        type: 'sequential',\n        scheme: 'brown_blueGreen',\n    },\n    emptyColor: '#000000',\n\n    legends: [],\n    annotations: [],\n\n    isInteractive: true,\n    hoverTarget: 'rowColumn',\n    tooltip: HeatMapTooltip,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    borderRadius: 0,\n    cellComponent: 'rect' as const,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    renderCell: 'rect' as const,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "import { scaleBand, scaleLinear } from 'd3-scale'\nimport { castBandScale } from '@nivo/scales'\nimport {\n    ComputedCell,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\n\nexport const computeLayout = ({\n    width: _width,\n    height: _height,\n    rows,\n    columns,\n    forceSquare,\n}: {\n    width: number\n    height: number\n    rows: number\n    columns: number\n    forceSquare: boolean\n}) => {\n    let width = _width\n    let height = _height\n\n    let offsetX = 0\n    let offsetY = 0\n\n    if (forceSquare) {\n        const cellWidth = Math.max(_width / columns, 0)\n        const cellHeight = Math.max(_height / rows, 0)\n        const cellSize = Math.min(cellWidth, cellHeight)\n\n        width = cellSize * columns\n        height = cellSize * rows\n\n        offsetX = (_width - width) / 2\n        offsetY = (_height - height) / 2\n    }\n\n    return {\n        offsetX,\n        offsetY,\n        width,\n        height,\n    }\n}\n\nexport const computeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width: _width,\n    height: _height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const serieIds: string[] = []\n    const allValues: number[] = []\n\n    const cells: Pick<ComputedCell<Datum>, 'id' | 'serieId' | 'value' | 'data'>[] = []\n\n    data.forEach(serie => {\n        serieIds.push(serie.id)\n\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n\n            let value: number | null = null\n            if (datum.y !== undefined && datum.y !== null) {\n                allValues.push(datum.y)\n                value = datum.y\n            }\n\n            cells.push({\n                id: `${serie.id}.${datum.x}`,\n                serieId: serie.id,\n                value,\n                data: datum,\n            })\n        })\n    })\n\n    const xValues = Array.from(xValuesSet)\n\n    const { width, height, offsetX, offsetY } = computeLayout({\n        width: _width,\n        height: _height,\n        columns: xValues.length,\n        rows: serieIds.length,\n        forceSquare,\n    })\n\n    const xScale = castBandScale<Datum['x']>(\n        scaleBand<Datum['x']>()\n            .domain(xValues)\n            .range([0, width])\n            .paddingOuter(xOuterPadding)\n            .paddingInner(xInnerPadding)\n    )\n\n    const yScale = castBandScale<string>(\n        scaleBand<string>()\n            .domain(serieIds)\n            .range([0, height])\n            .paddingOuter(yOuterPadding)\n            .paddingInner(yInnerPadding)\n    )\n\n    const cellWidth = xScale.bandwidth()\n    const cellHeight = yScale.bandwidth()\n\n    const cellsWithPosition: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[] = cells.map(cell => ({\n        ...cell,\n        x: xScale(cell.data.x)! + cellWidth / 2,\n        y: yScale(cell.serieId)! + cellHeight / 2,\n        width: cellWidth,\n        height: cellHeight,\n    }))\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        minValue: Math.min(...allValues),\n        maxValue: Math.max(...allValues),\n        cells: cellsWithPosition,\n    }\n}\n\nexport const computeSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) => {\n    if (!size) return () => 1\n\n    const scale = scaleLinear()\n        .domain(size.values ? size.values : [min, max])\n        .range(size.sizes)\n\n    return (value: number | null) => {\n        if (value === null) return 1\n        return scale(value)\n    }\n}\n\nexport const getCellAnnotationPosition = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    x: cell.x,\n    y: cell.y,\n})\n\nexport const getCellAnnotationDimensions = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    size: Math.max(cell.width, cell.height),\n    width: cell.width,\n    height: cell.height,\n})\n", "import { useMemo, useCallback, useState } from 'react'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useInheritedColor, getContinuousColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport {\n    ComputedCell,\n    DefaultHeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport {\n    computeCells,\n    computeSizeScale,\n    getCellAnnotationPosition,\n    getCellAnnotationDimensions,\n} from './compute'\n\nexport const useComputeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width,\n    height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) =>\n    useMemo(\n        () =>\n            computeCells<Datum, ExtraProps>({\n                data,\n                width,\n                height,\n                xInnerPadding,\n                xOuterPadding,\n                yInnerPadding,\n                yOuterPadding,\n                forceSquare,\n            }),\n        [\n            data,\n            width,\n            height,\n            xInnerPadding,\n            xOuterPadding,\n            yInnerPadding,\n            yOuterPadding,\n            forceSquare,\n        ]\n    )\n\nconst isHoverTargetByType = {\n    cell: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.id === current.id,\n    row: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId,\n    column: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.data.x === current.data.x,\n    rowColumn: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId || cell.data.x === current.data.x,\n}\n\nconst useSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) =>\n    useMemo(() => computeSizeScale(size, min, max), [size, min, max])\n\nconst useCellsStyle = <Datum extends HeatMapDatum = DefaultHeatMapDatum>({\n    cells,\n    minValue,\n    maxValue,\n    sizeVariation,\n    colors,\n    emptyColor,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    label,\n    labelTextColor,\n    valueFormat,\n    activeIds,\n}: {\n    cells: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[]\n    minValue: number\n    maxValue: number\n    valueFormat?: HeatMapCommonProps<Datum>['valueFormat']\n    activeIds: string[]\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    | 'sizeVariation'\n    | 'colors'\n    | 'emptyColor'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'label'\n    | 'labelTextColor'\n>) => {\n    const getSize = useSizeScale(sizeVariation, minValue, maxValue)\n\n    const colorScale = useMemo(() => {\n        if (typeof colors === 'function') return null\n\n        return getContinuousColorScale(colors, {\n            min: minValue,\n            max: maxValue,\n        })\n    }, [colors, minValue, maxValue])\n\n    const getColor = useCallback(\n        (cell: Omit<ComputedCell<Datum>, 'color' | 'opacity' | 'borderColor'>) => {\n            if (cell.value !== null) {\n                if (typeof colors === 'function') return colors(cell)\n                if (colorScale !== null) return colorScale(cell.value)\n            }\n\n            return emptyColor\n        },\n        [colors, colorScale, emptyColor]\n    )\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n\n    const styledCells = useMemo(\n        () =>\n            cells.map(cell => {\n                let computedOpacity = opacity\n                if (activeIds.length > 0) {\n                    computedOpacity = activeIds.includes(cell.id) ? activeOpacity : inactiveOpacity\n                }\n\n                const sizeMultiplier = getSize(cell.value)\n\n                const computedCell = {\n                    ...cell,\n                    width: cell.width * sizeMultiplier,\n                    height: cell.height * sizeMultiplier,\n                    formattedValue: cell.value !== null ? formatValue(cell.value) : null,\n                    opacity: computedOpacity,\n                } as ComputedCell<Datum>\n\n                computedCell.label = getLabel(computedCell)\n                computedCell.color = getColor(computedCell)\n                computedCell.borderColor = getBorderColor(computedCell)\n                computedCell.labelTextColor = getLabelTextColor(computedCell)\n\n                return computedCell\n            }),\n        [\n            cells,\n            getSize,\n            getColor,\n            getBorderColor,\n            getLabelTextColor,\n            formatValue,\n            getLabel,\n            activeIds,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n        ]\n    )\n\n    return {\n        cells: styledCells,\n        colorScale,\n    }\n}\n\nexport const useHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    data,\n    valueFormat,\n    width: _width,\n    height: _height,\n    xOuterPadding = commonDefaultProps.xOuterPadding,\n    xInnerPadding = commonDefaultProps.xInnerPadding,\n    yOuterPadding = commonDefaultProps.yOuterPadding,\n    yInnerPadding = commonDefaultProps.yInnerPadding,\n    forceSquare = commonDefaultProps.forceSquare,\n    sizeVariation = commonDefaultProps.sizeVariation,\n    colors = commonDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = commonDefaultProps.emptyColor,\n    opacity = commonDefaultProps.opacity,\n    activeOpacity = commonDefaultProps.activeOpacity,\n    inactiveOpacity = commonDefaultProps.inactiveOpacity,\n    borderColor = commonDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    label = commonDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = commonDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    hoverTarget = commonDefaultProps.hoverTarget,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Partial<\n    Pick<\n        HeatMapCommonProps<Datum>,\n        | 'valueFormat'\n        | 'xOuterPadding'\n        | 'xInnerPadding'\n        | 'yOuterPadding'\n        | 'yInnerPadding'\n        | 'forceSquare'\n        | 'sizeVariation'\n        | 'colors'\n        | 'emptyColor'\n        | 'opacity'\n        | 'activeOpacity'\n        | 'inactiveOpacity'\n        | 'borderColor'\n        | 'label'\n        | 'labelTextColor'\n        | 'hoverTarget'\n    >\n>) => {\n    const [activeCell, setActiveCell] = useState<ComputedCell<Datum> | null>(null)\n\n    const { width, height, offsetX, offsetY, cells, xScale, yScale, minValue, maxValue } =\n        useComputeCells<Datum, ExtraProps>({\n            data,\n            width: _width,\n            height: _height,\n            xOuterPadding,\n            xInnerPadding,\n            yOuterPadding,\n            yInnerPadding,\n            forceSquare,\n        })\n\n    const activeIds = useMemo(() => {\n        if (!activeCell) return []\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n\n        return cells.filter(cell => isHoverTarget(cell, activeCell)).map(cell => cell.id)\n    }, [cells, activeCell, hoverTarget])\n\n    const { cells: computedCells, colorScale } = useCellsStyle<Datum>({\n        cells,\n        minValue,\n        maxValue,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        valueFormat,\n        activeIds,\n    })\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        cells: computedCells,\n        xScale,\n        yScale,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    }\n}\n\nexport const useCellAnnotations = <Datum extends HeatMapDatum>(\n    cells: ComputedCell<Datum>[],\n    annotations: AnnotationMatcher<ComputedCell<Datum>>[]\n) =>\n    useAnnotations<ComputedCell<Datum>>({\n        data: cells,\n        annotations,\n        getPosition: getCellAnnotationPosition,\n        getDimensions: getCellAnnotationDimensions,\n    })\n", "import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CellComponentProps, HeatMapDatum } from './types'\n\nconst NonMemoizedHeatMapCellRect = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    borderRadius,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to(\n                [animatedProps.x, animatedProps.y, animatedProps.scale],\n                (x, y, scale) => `translate(${x}, ${y}) scale(${scale})`\n            )}\n        >\n            <animated.rect\n                transform={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => `translate(${width * -0.5}, ${height * -0.5})`\n                )}\n                key={cell.id}\n                fill={animatedProps.color}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                stroke={animatedProps.borderColor}\n                strokeWidth={borderWidth}\n                rx={borderRadius}\n                ry={borderRadius}\n            />\n            {enableLabels && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                        userSelect: 'none',\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellRect = memo(NonMemoizedHeatMapCellRect) as typeof NonMemoizedHeatMapCellRect\n", "import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { HeatMapDatum, CellComponentProps } from './types'\n\nconst NonMemoizedHeatMapCellCircle = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x}, ${y})`)}\n        >\n            <animated.circle\n                r={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => Math.min(width, height) / 2\n                )}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n            />\n            {enableLabels && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellCircle = memo(\n    NonMemoizedHeatMapCellCircle\n) as typeof NonMemoizedHeatMapCellCircle\n", "import { createElement, MouseEvent, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    CellComponent,\n    ComputedCell,\n    HeatMapDatum,\n    HeatMapSvgProps,\n    CellAnimatedProps,\n} from './types'\nimport { HeatMapCellRect } from './HeatMapCellRect'\nimport { HeatMapCellCircle } from './HeatMapCellCircle'\n\ninterface HeatMapCellsProps<Datum extends HeatMapDatum, ExtraProps extends object> {\n    cells: ComputedCell<Datum>[]\n    cellComponent: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['cellComponent']>\n    borderRadius: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderRadius']>\n    borderWidth: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderWidth']>\n    isInteractive: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['isInteractive']>\n    setActiveCell: (cell: ComputedCell<Datum> | null) => void\n    onMouseEnter: HeatMapSvgProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove: HeatMapSvgProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave: HeatMapSvgProps<Datum, ExtraProps>['onMouseLeave']\n    onClick: HeatMapSvgProps<Datum, ExtraProps>['onClick']\n    tooltip: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['tooltip']>\n    enableLabels: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['enableLabels']>\n}\n\nconst enterTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nconst regularTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: cell.opacity,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 1,\n})\n\nconst exitTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nexport const HeatMapCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    cells,\n    cellComponent,\n    borderRadius,\n    borderWidth,\n    isInteractive,\n    setActiveCell,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    enableLabels,\n}: HeatMapCellsProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedCell<Datum>, CellAnimatedProps>(cells, {\n        keys: (cell: ComputedCell<Datum>) => cell.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            setActiveCell(cell)\n            onMouseEnter?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, setActiveCell, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            onMouseMove?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            hideTooltip()\n            setActiveCell(null)\n            onMouseLeave?.(cell, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveCell, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            onClick?.(cell, event)\n        }\n    }, [isInteractive, onClick])\n\n    let Cell: CellComponent<Datum>\n    if (cellComponent === 'rect') {\n        Cell = HeatMapCellRect\n    } else if (cellComponent === 'circle') {\n        Cell = HeatMapCellCircle\n    } else {\n        Cell = cellComponent\n    }\n\n    return (\n        <>\n            {transition((animatedProps, cell) =>\n                createElement(Cell, {\n                    cell,\n                    borderRadius,\n                    borderWidth,\n                    animatedProps,\n                    enableLabels,\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            )}\n        </>\n    )\n}\n", "import { Annotation } from '@nivo/annotations'\nimport { ComputedCell, HeatMapCommonProps, HeatMapDatum } from './types'\nimport { useCellAnnotations } from './hooks'\n\ninterface HeatMapCellAnnotationsProps<Datum extends HeatMapDatum> {\n    cells: ComputedCell<Datum>[]\n    annotations: NonNullable<HeatMapCommonProps<Datum>['annotations']>\n}\n\nexport const HeatMapCellAnnotations = <Datum extends HeatMapDatum>({\n    cells,\n    annotations,\n}: HeatMapCellAnnotationsProps<Datum>) => {\n    const boundAnnotations = useCellAnnotations<Datum>(cells, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { ReactNode, Fragment, createElement, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { AnchoredContinuousColorsLegendSvg } from '@nivo/legends'\nimport {\n    DefaultHeatMapDatum,\n    HeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapSvgProps,\n    LayerId,\n    CustomLayerProps,\n} from './types'\nimport { useHeatMap } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport { HeatMapCells } from './HeatMapCells'\nimport { HeatMapCellAnnotations } from './HeatMapCellAnnotations'\n\ntype InnerHeatMapProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMap = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = svgDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare = svgDefaultProps.forceSquare,\n    xInnerPadding = svgDefaultProps.xInnerPadding,\n    xOuterPadding = svgDefaultProps.xOuterPadding,\n    yInnerPadding = svgDefaultProps.yInnerPadding,\n    yOuterPadding = svgDefaultProps.yOuterPadding,\n    sizeVariation = svgDefaultProps.sizeVariation,\n    cellComponent = svgDefaultProps.cellComponent as NonNullable<\n        HeatMapSvgProps<Datum, ExtraProps>['cellComponent']\n    >,\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    axisTop = svgDefaultProps.axisTop,\n    axisRight = svgDefaultProps.axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = svgDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = svgDefaultProps.emptyColor,\n    legends = svgDefaultProps.legends,\n    annotations = svgDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    hoverTarget = svgDefaultProps.hoverTarget,\n    tooltip = svgDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerHeatMapProps<Datum, ExtraProps>) => {\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        forceSquare,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        cells: null,\n        legends: null,\n        annotations: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <Fragment key=\"cells\">\n                <HeatMapCells<Datum, ExtraProps>\n                    cells={cells}\n                    cellComponent={cellComponent}\n                    borderRadius={borderRadius}\n                    borderWidth={borderWidth}\n                    isInteractive={isInteractive}\n                    setActiveCell={setActiveCell}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                    enableLabels={enableLabels}\n                />\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('legends') && colorScale !== null) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, index) => (\n                    <AnchoredContinuousColorsLegendSvg\n                        {...legend}\n                        key={index}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        scale={colorScale}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('annotations') && annotations.length > 0) {\n        layerById.annotations = (\n            <HeatMapCellAnnotations<Datum>\n                key=\"annotations\"\n                cells={cells}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Datum> = {\n        cells,\n        activeCell,\n        setActiveCell,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top, //+ offsetY,\n                left: margin.left, // + offsetX,\n            })}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const HeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: HeatMapSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerHeatMap<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapDatum, HeatMapSvgProps } from './types'\nimport { HeatMap } from './HeatMap'\n\nexport const ResponsiveHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapSvgProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMap<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { CellCanvasRendererProps, HeatMapDatum } from './types'\n\nexport const renderRect = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n    if (borderWidth > 0) {\n        ctx.strokeRect(x - width / 2, y - height / 2, width, height)\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\nexport const renderCircle = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n\n    ctx.fill()\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n", "import { useEffect, useRef, useCallback, createElement, useMemo, MouseEvent } from 'react'\nimport { getRelativeCursor, isCursorInRect, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { renderContinuousColorLegendToCanvas } from '@nivo/legends'\nimport { renderAnnotationsToCanvas, useComputedAnnotations } from '@nivo/annotations'\nimport { useHeatMap, useCellAnnotations } from './hooks'\nimport { renderRect, renderCircle } from './canvas'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    CellCanvasRenderer,\n    DefaultHeatMapDatum,\n    HeatMapCanvasProps,\n    HeatMapCommonProps,\n    HeatMapDatum,\n    CellShape,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapCanvasProps<Datum, ExtraProps>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMapCanvas = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = canvasDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    xInnerPadding = canvasDefaultProps.xInnerPadding,\n    xOuterPadding = canvasDefaultProps.xOuterPadding,\n    yInnerPadding = canvasDefaultProps.yInnerPadding,\n    yOuterPadding = canvasDefaultProps.yOuterPadding,\n    forceSquare = canvasDefaultProps.forceSquare,\n    sizeVariation = canvasDefaultProps.sizeVariation,\n    renderCell: _renderCell = canvasDefaultProps.renderCell as CellShape,\n    opacity = canvasDefaultProps.opacity,\n    activeOpacity = canvasDefaultProps.activeOpacity,\n    inactiveOpacity = canvasDefaultProps.inactiveOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    axisTop = canvasDefaultProps.axisTop,\n    axisRight = canvasDefaultProps.axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableLabels = canvasDefaultProps.enableLabels,\n    label = canvasDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = canvasDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = canvasDefaultProps.emptyColor,\n    legends = canvasDefaultProps.legends,\n    annotations = canvasDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = canvasDefaultProps.isInteractive,\n    onClick,\n    hoverTarget = canvasDefaultProps.hoverTarget,\n    tooltip = canvasDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n}: InnerNetworkCanvasProps<Datum, ExtraProps>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const boundAnnotations = useCellAnnotations(cells, annotations)\n    const computedAnnotations = useComputedAnnotations({\n        annotations: boundAnnotations,\n    })\n\n    let renderCell: CellCanvasRenderer<Datum>\n    if (typeof _renderCell === 'function') {\n        renderCell = _renderCell\n    } else if (_renderCell === 'circle') {\n        renderCell = renderCircle\n    } else {\n        renderCell = renderRect\n    }\n\n    const theme = useTheme()\n\n    const customLayerProps: CustomLayerProps<Datum> = useMemo(\n        () => ({\n            cells,\n            activeCell,\n            setActiveCell,\n        }),\n        [cells, activeCell, setActiveCell]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top) // + offsetX, margin.top + offsetY)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                if (enableGridX) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                    })\n                }\n                if (enableGridY) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                    })\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth, // - offsetX * 2,\n                    height: innerHeight, // - offsetY * 2,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'cells') {\n                ctx.textAlign = 'center'\n                ctx.textBaseline = 'middle'\n\n                cells.forEach(cell => {\n                    renderCell(ctx, { cell, borderWidth, enableLabels, theme })\n                })\n            } else if (layer === 'legends' && colorScale !== null) {\n                legends.forEach(legend => {\n                    renderContinuousColorLegendToCanvas(ctx, {\n                        ...legend,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        scale: colorScale,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, {\n                    annotations: computedAnnotations,\n                    theme,\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        pixelRatio,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        layers,\n        customLayerProps,\n        cells,\n        renderCell,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        borderWidth,\n        enableLabels,\n        colorScale,\n        legends,\n        computedAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left - c.width / 2, // + offsetX - c.width / 2,\n                    c.y + margin.top - c.height / 2, //+ offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setActiveCell(cell)\n                showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            } else {\n                setActiveCell(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            // offsetX,\n            // offsetY,\n            setActiveCell,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setActiveCell(null)\n        hideTooltip()\n    }, [setActiveCell, hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (activeCell === null) return\n\n            onClick?.(activeCell, event)\n        },\n        [activeCell, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const HeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: HeatMapCanvasProps<Datum, ExtraProps>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerHeatMapCanvas<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapCanvasProps, HeatMapDatum } from './types'\nimport { HeatMapCanvas } from './HeatMapCanvas'\n\nexport const ResponsiveHeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapCanvasProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMapCanvas<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["commonDefaultProps", "layers", "forceSquare", "xInnerPadding", "xOuterPadding", "yInnerPadding", "yOuterPadding", "sizeVariation", "opacity", "activeOpacity", "inactiveOpacity", "borderWidth", "borderColor", "from", "modifiers", "enableGridX", "enableGridY", "enableLabels", "label", "labelTextColor", "colors", "type", "scheme", "emptyColor", "legends", "annotations", "isInteractive", "hoverTarget", "tooltip", "memo", "_ref", "cell", "formattedValue", "_jsx", "BasicTooltip", "id", "serieId", "data", "x", "value", "enableChip", "color", "animate", "motionConfig", "svgDefaultProps", "_extends", "axisTop", "axisRight", "axisBottom", "axisLeft", "borderRadius", "cellComponent", "canvasDefaultProps", "renderCell", "pixelRatio", "window", "devicePixelRatio", "computeLayout", "_width", "width", "_height", "height", "rows", "columns", "offsetX", "offsetY", "cellWidth", "Math", "max", "cellHeight", "cellSize", "min", "computeCells", "_ref2", "xValuesSet", "Set", "serieIds", "allValues", "cells", "forEach", "serie", "push", "datum", "add", "y", "xValues", "Array", "_computeLayout", "length", "xScale", "castBandScale", "scaleBand", "domain", "range", "paddingOuter", "paddingInner", "yScale", "bandwidth", "cellsWithPosition", "map", "minValue", "apply", "maxValue", "computeSizeScale", "size", "scale", "scaleLinear", "values", "sizes", "getCellAnnotationPosition", "getCellAnnotationDimensions", "useComputeCells", "useMemo", "isHoverTargetByType", "current", "row", "column", "rowColumn", "useCellsStyle", "valueFormat", "activeIds", "getSize", "colorScale", "getContinuousColorScale", "getColor", "useCallback", "theme", "useTheme", "getBorderColor", "useInheritedColor", "getLabelTextColor", "formatValue", "useValueFormatter", "getLabel", "usePropertyAccessor", "computedOpacity", "includes", "sizeMultiplier", "computedCell", "useHeatMap", "_ref3", "_ref3$xOuterPadding", "_ref3$xInnerPadding", "_ref3$yOuterPadding", "_ref3$yInnerPadding", "_ref3$forceSquare", "_ref3$sizeVariation", "_ref3$colors", "_ref3$emptyColor", "_ref3$opacity", "_ref3$activeOpacity", "_ref3$inactiveOpacity", "_ref3$borderColor", "_ref3$label", "_ref3$labelTextColor", "_ref3$hoverTarget", "_useState", "useState", "activeCell", "setActiveCell", "_useComputeCells", "isHoverTarget", "filter", "_useCellsStyle", "useCellAnnotations", "useAnnotations", "getPosition", "getDimensions", "HeatMapCellRect", "animatedProps", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "handlers", "undefined", "_jsxs", "animated", "g", "style", "cursor", "transform", "to", "children", "rect", "fill", "stroke", "strokeWidth", "rx", "ry", "text", "textAnchor", "dominantBaseline", "labels", "userSelect", "HeatMapCellCircle", "circle", "r", "fillOpacity", "enterTransition", "regularTransition", "exitTransition", "HeatMapCells", "Cell", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "transition", "useTransition", "keys", "initial", "enter", "update", "leave", "immediate", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleMouseEnter", "event", "createElement", "handleMouseMove", "handleMouseLeave", "handleClick", "_Fragment", "HeatMapCellAnnotations", "boundAnnotations", "annotation", "i", "Annotation", "InnerHeatMap", "_ref$layers", "partialMargin", "margin", "_ref$forceSquare", "_ref$xInnerPadding", "_ref$xOuterPadding", "_ref$yInnerPadding", "_ref$yOuterPadding", "_ref$sizeVariation", "_ref$cellComponent", "_ref$opacity", "_ref$activeOpacity", "_ref$inactiveOpacity", "_ref$borderRadius", "_ref$borderWidth", "_ref$borderColor", "_ref$enableGridX", "_ref$enableGridY", "_ref$axisTop", "_ref$axisRight", "_ref$axisBottom", "_ref$axisLeft", "_ref$enableLabels", "_ref$label", "_ref$labelTextColor", "_ref$colors", "_ref$emptyColor", "_ref$legends", "_ref$annotations", "_ref$isInteractive", "_ref$hoverTarget", "_ref$tooltip", "role", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "_useDimensions", "useDimensions", "_margin", "_innerWidth", "innerWidth", "_innerHeight", "innerHeight", "outerWidth", "outerHeight", "_useHeatMap", "top", "left", "layerById", "grid", "axes", "Grid", "Axes", "right", "bottom", "Fragment", "legend", "index", "_createElement", "AnchoredContinuousColorsLegendSvg", "key", "containerWidth", "containerHeight", "customLayerProps", "SvgWrapper", "Object", "assign", "layer", "_layerById$layer", "HeatMap", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "_objectWithoutPropertiesLoose", "_excluded", "Container", "ResponsiveHeatMap", "props", "ResponsiveWrapper", "renderRect", "ctx", "_ref$cell", "save", "globalAlpha", "fillStyle", "strokeStyle", "lineWidth", "fillRect", "strokeRect", "font", "fontWeight", "fontSize", "fontFamily", "textAlign", "textBaseline", "fillText", "restore", "renderCircle", "_ref2$cell", "radius", "beginPath", "arc", "PI", "InnerHeatMapCanvas", "_ref$renderCell", "_renderCell", "_ref$pixelRatio", "canvasEl", "useRef", "computedAnnotations", "useComputedAnnotations", "useEffect", "getContext", "background", "translate", "line", "renderGridLinesToCanvas", "axis", "renderAxesToCanvas", "renderContinuousColorLegendToCanvas", "renderAnnotationsToCanvas", "handleMouseHover", "_getRelativeCursor", "getRelativeCursor", "find", "c", "isCursorInRect", "ref", "HeatMapCanvas", "ResponsiveHeatMapCanvas"]
}
